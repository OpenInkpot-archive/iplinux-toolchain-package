#!/bin/bash
#
# IPlinux cross-toolchain builder, heavily based on SLIND cross-toolchain
# builder.
#

if [ -n "$DEBUG" ]; then
    set -x
fi

TP_VERSION=0.4
TPKG_MAINTAINER="Mikhail Gusarov <dottedmag@dottedmag.net>"

ACT_LIST="do_clean do_binutils do_lld do_bs1_glibc do_bs1_gcc do_bs2_glibc do_gcc do_glibc do_ct_pkg"

usage() {
    echo -e "Usage: $0 <target-arch> [action] ..."
    echo
    echo -e "\t<target-arch> must be a Debian architecture string."
    echo
    echo -e "\t[action] - one or more of: $ACT_LIST"
    echo
}

if [ $# -lt 1 ] ; then
    usage
    exit 1
fi

TARGET=$1
SRC_DIR=`pwd`
LOG_BASE=log-$1

#
# Current gcc version (part of package name)
#
GCC_VERSION=4.3

#
# -- Paths to sources --
#
BINUTILS_DIR=$SRC_DIR/binutils
LLD_DIR=$SRC_DIR/linux-libc-dev
UCLIBC_DIR=$SRC_DIR/uclibc
GLIBC_DIR=$SRC_DIR/glibc
GCC_DIR=$SRC_DIR/gcc-$GCC_VERSION

INSTALL_ROOTCMD=sudo

MYARCH=$(dpkg --print-architecture)

vars=( BUILD_ARCH BUILD_ARCH_OS BUILD_ARCH_CPU BUILD_GNU_CPU BUILD_GNU_SYSTEM BUILD_GNU_TYPE HOST_ARCH HOST_ARCH_OS HOST_ARCH_CPU HOST_GNU_CPU HOST_GNU_SYSTEM HOST_GNU_TYPE )
for i in ${vars[*]} ; do
    eval $i=$(dpkg-architecture -a$TARGET -qDEB_$i)

done

DEBPKG_HOST_GNU_TYPE=$(echo ${HOST_GNU_TYPE} | tr _ -)

if [ "x${HOST_GNU_TYPE}" = "x${BUILD_GNU_TYPE}" ] ; then
    echo "Host system type same as target: ${HOST_GNU_TYPE}"
    echo "This should never happen. Ure are probably using wrong dpkg."
    exit 1
fi

# The build sequence is defined here.
shift
if [ $# -ne 0 ] ; then
    ACTIONS=$@
    # Explicit actions are performed no matter what
    FORCED_ACTION="y"
else
    case "$HOST_GNU_SYSTEM" in
        *uclibc*)
            echo "uclibc is not supported yet."
            ;;
        *gnu*)
            ACTIONS="do_clean do_binutils do_lld do_bs1_glibc do_bs1_gcc do_bs2_glibc do_gcc do_glibc do_ct_pkg"
            ;;
        *)
            echo "Unknown libc requested: $HOST_GNU_SYSTEM"
            ;;
    esac
fi



# get source package's version from its debian/changelog
# $1 -- path to unpacked sources
_get_version() {
    local _dir="$1"
    cd "$_dir"; dpkg-parsechangelog 2>/dev/null |awk '/Version:/ {print $2}'
}

# -- Package names & versions --

BINUTILS_V=$(_get_version "$BINUTILS_DIR")
BINUTILS_PKGNAME="binutils-${DEBPKG_HOST_GNU_TYPE}"
BINUTILS_DEBPKG="${BINUTILS_PKGNAME}_${BINUTILS_V}_${BUILD_ARCH}.deb"
BINUTILS_STUFF="binutils_${BINUTILS_V}_${BUILD_ARCH}.changes"

LLD_V=$(_get_version "$LLD_DIR")
LLD_CROSSPKGNAME="linux-libc-dev-${HOST_ARCH}-cross"
LLD_DEBCROSS="${LLD_CROSSPKGNAME}_${LLD_V}_all.deb"
LLD_DEBPKG="linux-libc-dev_${LLD_V}_${HOST_ARCH}.deb"
LLD_STUFF="linux-libc-dev_${LLD_V}_${HOST_ARCH}.changes"

# UCLIBC_V=$(_get_version "$UCLIBC_DIR")
GLIBC_V=$(_get_version "$GLIBC_DIR")

# Stage 1
GLIBC_DEV_HEADERS_CROSSPKGNAME="libc6-dev-headers-${HOST_ARCH}-cross"
GLIBC_DEV_HEADERS_DEBCROSS="${GLIBC_DEV_HEADERS_CROSSPKGNAME}_${GLIBC_V}_all.deb"
GLIBC_DEV_HEADERS_DEBPKG="libc6-dev-headers_${GLIBC_V}_${HOST_ARCH}.deb"

# Stage 2&3
GLIBC_CROSSPKGNAME="libc6-${HOST_ARCH}-cross"
GLIBC_DEBCROSS="${GLIBC_CROSSPKGNAME}_${GLIBC_V}_all.deb"
GLIBC_DEBPKG="libc6_${GLIBC_V}_${HOST_ARCH}.deb"
GLIBC_STUFF="glibc_${GLIBC_V}_${HOST_ARCH}.changes"

GLIBC_DEV_CROSSPKGNAME="libc6-dev-${HOST_ARCH}-cross"
GLIBC_DEV_DEBCROSS="${GLIBC_DEV_CROSSPKGNAME}_${GLIBC_V}_all.deb"
GLIBC_DEV_DEBPKG="libc6-dev_${GLIBC_V}_${HOST_ARCH}.deb"

GCC_V=$(_get_version "$GCC_DIR")
case "$GCC_VERSION" in
    4.3)
        GXX_SONAME=6;;
    *)
        echo "Unknown GCC_VERSION: $GCC_VERSION"
        exit 1;;
esac

GCC_PKGNAME="gcc-${GCC_VERSION}-${DEBPKG_HOST_GNU_TYPE}"
GCC_DEBPKG="${GCC_PKGNAME}_${GCC_V}_${BUILD_ARCH}.deb"
GCC_STUFF="gcc-${GCC_VERSION}_${GCC_V}.tar.gz gcc-${GCC_VERSION}_${GCC_V}.dsc"

GCC_BASE_PKGNAME="gcc-${GCC_VERSION}-${DEBPKG_HOST_GNU_TYPE}-base"
GCC_BASE_DEBPKG="${GCC_BASE_PKGNAME}_${GCC_V}_${BUILD_ARCH}.deb"

CPP_PKGNAME="cpp-${GCC_VERSION}-${DEBPKG_HOST_GNU_TYPE}"
CPP_DEBPKG="${CPP_PKGNAME}_${GCC_V}_${BUILD_ARCH}.deb"

GXX_PKGNAME="g++-${GCC_VERSION}-${DEBPKG_HOST_GNU_TYPE}"
GXX_DEBPKG="${GXX_PKGNAME}_${GCC_V}_${BUILD_ARCH}.deb"

LIBGCC_CROSSPKGNAME="libgcc1-${HOST_ARCH}-cross"
LIBGCC_DEBCROSS="${LIBGCC_CROSSPKGNAME}_${GCC_V}_all.deb"
LIBGCC_DEBPKG="libgcc1_${GCC_V}_${HOST_ARCH}.deb"

LIBSTDCXX_CROSSNAME="libstdc++${GXX_SONAME}-${HOST_ARCH}-cross"
LIBSTDCXX_DEBCROSS="${LIBSTDCXX_CROSSNAME}_${GCC_V}_all.deb"
LIBSTDCXX_DEBPKG="libstdc++${GXX_SONAME}_${GCC_V}_${HOST_ARCH}.deb"

LIBSTDCXX_DEV_CROSSNAME="libstdc++${GXX_SONAME}-${GCC_VERSION}-dev-${HOST_ARCH}-cross"
LIBSTDCXX_DEV_DEBCROSS="${LIBSTDCXX_DEV_CROSSNAME}_${GCC_V}_all.deb"
LIBSTDCXX_DEV_DEBPKG="libstdc++${GXX_SONAME}-${GCC_VERSION}-dev_${GCC_V}_${HOST_ARCH}.deb"

TPKG_PKGNAME="${HOST_ARCH}-cross-toolchain"
TPKG_STUFF="${TPKG_PKGNAME}.changes"
# banner
echo "Building cross toolchain packages"
echo "---------------------------------"
echo "Host architecture: $MYARCH"
echo "Target cpu: $HOST_GNU_CPU"
echo "Target os: $HOST_GNU_SYSTEM"
echo "Actions: $ACTIONS"

# call dpkg-cross to convert a target package into a -cross package
# and perform cross-installation
# Takes paths to binary packages to be processed as arguments.
_crossinst() {
    echo "Dpkg-crossing following packages: $@"
    ( cd "$SRC_DIR"; dpkg-cross -A -a ${HOST_ARCH} -b "$@" )
    ( cd "$SRC_DIR"; $INSTALL_ROOTCMD dpkg-cross -A -a ${HOST_ARCH} -i "$@" )
}

# ------------------------------------------------------- #
# tools                                                   #
# ------------------------------------------------------- #
# These functions are responsible for building of each component
# in the toolchain. Names and code should be pretty straightforward.

do_clean() {
    PACKAGES=( $TPKG_PKGNAME $BINUTILS_PKGNAME $LLD_CROSSPKGNAME \
                    $GLIBC_DEV_HEADERS_CROSSPKGNAME $GLIBC_CROSSPKGNAME \
                    $GLIBC_DEV_CROSSPKGNAME $GCC_PKGNAME $GCC_BASE_PKGNAME \
                    $CPP_PKGNAME $GXX_PKGNAME $LIBGCC_CROSSPKGNAME \
                    $LIBSTDCXX_CROSSNAME $LIBSTDCXX_DEV_CROSSNAME )

    DEBS=( $BINUTILS_DEBPKG $LLD_DEBPKG $LLD_DEBCROSS \
            $GLIBC_DEV_HEADERS_DEBCROSS $GLIBC_DEV_HEADERS_DEBPKG \
            $GLIBC_DEBCROSS $GLIBC_DEBPKG $GLIBC_DEV_DEBCROSS \
            $GLIBC_DEV_DEBPKG $GCC_DEBPKG $GCC_BASE_DEBPKG $CPP_DEBPKG \
            $GXX_DEBPKG $LIBGCC_DEBCROSS $LIBGCC_DEBPKG $LIBSTDCXX_DEBCROSS \
            $LIBSTDCXX_DEBPKG $LIBSTDCXX_DEV_DEBCROSS $LIBSTDCXX_DEV_DEBPKG )

    STUFF=( $BINUTILS_STUFF $LLD_STUFF $GLIBC_STUFF $GCC_STUFF $TPKG_STUFF )

    echo "Uninstallig packages: ${PACKAGES[*]} ..."
    $INSTALL_ROOTCMD dpkg -P ${PACKAGES[*]}

    echo "Deleting packages: ${DEBS[*]}"
    rm ${DEBS[*]}

    echo "Deleting other files: ${STUFF[*]}"
    rm ${STUFF[*]}
    rm -r ./$TPKG_PKGNAME/

}

############
# binutils #
############
do_binutils() {
    ( cd $BINUTILS_DIR ; env TARGET=$HOST_ARCH dpkg-buildpackage -us -uc -b ) && \
    $INSTALL_ROOTCMD dpkg -i $BINUTILS_DEBPKG
}

##################
# linux-libc-dev #
##################
do_lld() {
    ( cd $LLD_DIR ; dpkg-buildpackage -uc -us -a${HOST_ARCH} -b ) && \
    _crossinst $LLD_DEBPKG
}

#########
# glibc #
#########
do_bs1_glibc() {
    ( cd $GLIBC_DIR ; env DEB_CROSS_BOOTSTRAP=yes \
        dpkg-buildpackage -uc -us -a${HOST_ARCH} -b ) && \
    _crossinst $GLIBC_DEV_HEADERS_DEBPKG
}


do_bs2_glibc() {
    ( cd $GLIBC_DIR ; env DEB_CROSS_BOOTSTRAP=second \
        dpkg-buildpackage -uc -us -a${HOST_ARCH} -b ) && \
    $INSTALL_ROOTCMD dpkg -P $GLIBC_DEV_HEADERS_CROSSPKGNAME && \
    _crossinst $GLIBC_DEBPKG $GLIBC_DEV_DEBPKG
}

do_glibc() {
    # bs2 and final glibc packages have the same names.
    rm -f $GLIBC_DEBPKG $GLIBC_DEV_DEBPKG $GLIBC_DEBCROSS $GLIBC_DEV_DEBCROSS

    ( cd $GLIBC_DIR ; dpkg-buildpackage -uc -us -a${HOST_ARCH} -b ) && \
    _crossinst $GLIBC_DEBPKG $GLIBC_DEV_DEBPKG
}

#######
# gcc #
#######
do_bs1_gcc() {
    ( cd $GCC_DIR ; env GCC_TARGET=${HOST_ARCH} DEB_CROSS=yes DEB_CROSS_BOOTSTRAP=yes \
        dpkg-buildpackage -uc -us -b ) && \
    $INSTALL_ROOTCMD dpkg -i --force-depends $LIBGCC_DEBCROSS $GCC_BASE_DEBPKG $GCC_DEBPKG $CPP_DEBPKG
}

do_gcc() {
    $INSTALL_ROOTCMD dpkg -P $GCC_PKGNAME $GCC_BASE_PKGNAME $CPP_PKGNAME $LIBGCC_CROSSPKGNAME

    ( cd $GCC_DIR ; env GCC_TARGET=${HOST_ARCH} DEB_CROSS=yes DEB_TARGET_LIBCXX=yes \
        dpkg-buildpackage -uc -us -b ) && \
    $INSTALL_ROOTCMD dpkg -i $LIBGCC_DEBCROSS $LIBSTDCXX_DEBCROSS \
        $LIBSTDCXX_DEV_DEBCROSS $GCC_BASE_DEBPKG $GCC_DEBPKG $CPP_DEBPKG $GXX_DEBPKG
}

# -- toolchain metapackage --
do_ct_pkg() {
    # render package's "Depends:" header
    BINUTILS_PKGDEP="$BINUTILS_PKGNAME (= ${BINUTILS_V})"

    LLD_PKGDEP="$LLD_CROSSPKGNAME (= ${LLD_V})"

    GCC_PKGDEP="$GCC_PKGNAME (= ${GCC_V}), $GCC_BASE_PKGNAME (= ${GCC_V}), $CPP_PKGNAME (= ${GCC_V}), $GXX_PKGNAME (= ${GCC_V}), $LIBGCC_CROSSPKGNAME (= ${GCC_V}), $LIBSTDCXX_CROSSNAME (= ${GCC_V}), $LIBSTDCXX_DEV_CROSSNAME (= ${GCC_V})"

    PROVIDES="build-essential-${BUILD_ARCH}-cross, cross-toolchain-${HOST_ARCH}-cross, cross-toolchain-${HOST_ARCH}-dcv1"
    CONFLICTS=""


    case "$HOST_ARCH_OS" in
        uclibc)
            LIBC_PKGDEP="libuclibc0-${HOST_ARCH}-cross (= ${UCLIBC_V}), libuclibc-dev-${HOST_ARCH}-cross (= ${UCLIBC_V})"
            ;;
        linux)
            LIBC_PKGDEP="$GLIBC_CROSSPKGNAME (= ${GLIBC_V}), $GLIBC_DEV_CROSSPKGNAME (= ${GLIBC_V})"
            ;;
        *)
            echo "Unknown OS"; exit 1;;
    esac

    DEPENDS="$BINUTILS_PKGDEP, $LLD_PKGDEP, $GCC_PKGDEP, $LIBC_PKGDEP"

    TPKG_PKGDIR=$SRC_DIR/$TPKG_PKGNAME

    TPKG_VERSION="${TP_VERSION}+binutils${BINUTILS_V}+linux-libc-dev${LLD_V}+gcc${GCC_V}"
    case "$HOST_ARCH_OS" in
        uclibc)
            TPKG_VERSION="${TPKG_VERSION}+uclibc${UCLIBC_V}";;
        linux)
            TPKG_VERSION="${TPKG_VERSION}+glibc${GLIBC_V}";;
        *)
            echo "Unknown OS"; exit 1;;
    esac

    TPKG_VERSION=$(echo $TPKG_VERSION | sed -e 's,-,+,g')

    mkdir -p $TPKG_PKGDIR/debian/tmp/DEBIAN
    cat > $TPKG_PKGDIR/debian/control <<EOF
Source: toolchain-package
Section: host/tools
Priority: optional
Maintainer: $TPKG_MAINTAINER
Standards-Version: 3.8.0

Package: $TPKG_PKGNAME
Architecture: any
Depends: $DEPENDS
Conflicts: $CONFLICTS
Provides: $PROVIDES
Description: cross-compilation toolchain for $HOST_ARCH
 This is a metapackage that will get you a complete toolchain
 for cross-compilation into $HOST_ARCH target.
EOF

    TPKG_DATE=$(date -R)

    cat > $TPKG_PKGDIR/debian/changelog <<EOF
toolchain-package ($TPKG_VERSION) asimov; urgency=low

  * Fake changelog for fake package.

 -- $TPKG_MAINTAINER  $TPKG_DATE
EOF

    (cd $TPKG_PKGDIR && dpkg-gencontrol) && \
    dpkg-deb -b $TPKG_PKGDIR/debian/tmp $SRC_DIR/${TPKG_PKGNAME}.deb && \
    $INSTALL_ROOTCMD dpkg -i $SRC_DIR/${TPKG_PKGNAME}.deb && \
    dpkg-name -o $SRC_DIR/${TPKG_PKGNAME}.deb && \
    (cd $TPKG_PKGDIR && dpkg-genchanges -b) > $SRC_DIR/${TPKG_PKGNAME}.changes
}

run_action () {
    echo "Running '$1'..."
    if [ -z "$DEBUG" ] ; then
        ( $1 ) > $LOG_BASE-$1.log 2>&1
    else
        ( $1 ) 2>&1 | tee $LOG_BASE-$1.log
    fi
    if [ $? -ne 0 ] ; then
        echo "Action '$1' failed, see logs in '$LOG_BASE-$1.log'"
        exit 1
    fi
}

for action in $ACTIONS ; do
    run_action $action
done


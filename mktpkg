#!/bin/bash
#
# Inkpump cross-toolchain builder, heavily based on SLIND cross-toolchain
# builder.
#
# It is capable of operating in two modes:
#
#  1) building from git; this is default mode, and can be adjusted by passing
#  --<pkg>-tag= options. In this mode mktpkg obtains sources by checking out
#  source code from git, using passed tags and by looking at binary repository
#  and finding out corresponding source for components which are not specified
#  in command line.
#
#  2) building from provided source code. This is enabled by option
#  --manual-mode and providing source code in target-dir, in directories named
#  after components (binutils, linux-libc-dev, gcc-${VERSION}, glibc, uclibc).
#

TP_VERSION=0.3
SUITE=asimov
BDBT=/usr/share/bashdb/bashdb-trace

usage() {
	echo
	echo "Usage: $0 [--force] [--manual-mode] [--suite=<suite>] <target-arch>"
	echo
	echo "<target-arch> must be a Debian architecture string."
    echo "<build-dir> must be a writable directory"
    echo "<suite> must be a OpenInkpot suite, defaults to $SUITE."
}

if [ -n "$DEBUG" ]; then
    [ -f $BDBT ] || (echo "Please instal bashdb"; exit 1)
    source $BDBT -q
    _Dbg_set_trace ; : ; :
fi

if [ -n "$TRACE" ]; then
    [ -f $BDBT ] || (echo "Please install bashdb"; exit 1)
    source $BDBT -q
    _Dbg_linetrace_on
fi

TEMP=$(getopt -o h --longoptions force,manual-mode,suite:,binutils-tag:,lld-tag:,gcc-tag:,glibc-tag:,uclibc-tag: -n $0 -- "$@")
if [ $? != 0 ]; then
    exit 1
fi
eval set -- "$TEMP"

while true; do
    case "$1" in
        --help) usage; exit;;
        --force) FORCED_ACTION=1; shift;;
        --manual-mode) MANUAL_MODE=1; shift;;
        # lld_TAG, binutils_TAG...
        --*-tag) eval "${${1#--}%-tag}_TAG=$2"; shift 2;;
        --suite) SUITE=$2; shift 2;;
        --) shift; break;;
        *) exit 1;;
    esac
done

TARGET="$1"
if [ -z "$TARGET" ]; then
    usage
    exit 1
fi

SRC_DIR=`pwd`

# SIGINT handler; removes cruft
# if $NO_CLEAN is set in the environment, this function does nothing
cleanup() {
	if [ -z "$NO_CLEAN" ]; then
		rm -rf "$SRC_DIR"
	fi
}

if [ -z "$TPKG_MAINTAINER" ]; then
	TPKG_MAINTAINER="Mikhail Gusarov <dottedmag@dottedmag.net>"
fi

#
# Current gcc version (part of package name)
#
GCC_VERSION=4.3

#
# -- Paths to sources --
#
BINUTILS_DIR=$SRC_DIR/binutils
LLD_DIR=$SRC_DIR/linux-libc-dev
UCLIBC_DIR=$SRC_DIR/uclibc
GLIBC_DIR=$SRC_DIR/glibc
GCC_DIR=$SRC_DIR/gcc-$GCC_VERSION

[ -n "$INSTALL_ROOTCMD" ] || INSTALL_ROOTCMD=sudo

#

MYARCH=$(dpkg --print-architecture)

ARCH_INFO=$(dpkg-architecture -a$TARGET -s)
if [ -z "$ARCH_INFO" ]; then
    echo "Unknown architecture: $TARGET"
    exit 1
fi
eval "$ARCH_INFO"

DEBPKG_HOST_GNU_TYPE=$(echo ${DEB_HOST_GNU_TYPE} | tr _ -)

if [ "x${DEB_HOST_GNU_TYPE}" = "x${DEB_BUILD_GNU_TYPE}" ] ; then
	echo "Host system type same as target: ${DEB_HOST_GNU_TYPE}"
	echo "This should never happen. Ure are probably using wrong dpkg."
	exit 1
fi


if [ -z $MANUAL_MODE ]; then
    echo "Get packages from Git"; exit 1;
fi

# get source package's version from its debian/changelog
# $1 -- path to unpacked sources
_get_version() {
	local _dir="$1"
	cd "$_dir"; dpkg-parsechangelog|awk '/Version:/ {print $2}'
}

# -- Package names & versions --

BINUTILS_V=$(_get_version "$BINUTILS_DIR")
BINUTILS_PKGNAME="binutils-${DEBPKG_HOST_GNU_TYPE}"
BINUTILS_DEBPKG="${BINUTILS_PKGNAME}_${BINUTILS_V}_${DEB_BUILD_ARCH}.deb"

LLD_V=$(_get_version "$LLD_DIR")
LLD_CROSSPKGNAME="linux-libc-dev-${DEB_HOST_ARCH}-cross"
LLD_DEBPKG="linux-libc-dev_${LLD_V}_${DEB_HOST_ARCH}.deb"

case "$DEB_HOST_GNU_SYSTEM" in
    *uclibc*)
        UCLIBC_V=$(_get_version "$UCLIBC_DIR")
        ;;
    *)
        GLIBC_V=$(_get_version "$GLIBC_DIR")

        # Stage 1
        GLIBC_DEV_HEADERS_CROSSPKGNAME="libc6-dev-headers-${DEB_HOST_ARCH}-cross"
        GLIBC_DEV_HEADERS_DEBPKG="libc6-dev-headers_${GLIBC_V}_${DEB_HOST_ARCH}.deb"

        # Stage 2&3
        GLIBC_CROSSPKGNAME="libc6-${DEB_HOST_ARCH}-cross"
        GLIBC_DEBPKG="libc6_${GLIBC_V}_${DEB_HOST_ARCH}.deb"

        GLIBC_DEV_CROSSPKGNAME="libc6-dev-${DEB_HOST_ARCH}-cross"
        GLIBC_DEV_DEBPKG="libc6-dev_${GLIBC_V}_${DEB_HOST_ARCH}.deb"
        ;;
esac

GCC_V=$(_get_version "$GCC_DIR")
case "$GCC_VERSION" in
	4.3)
		GXX_SONAME=6;;
    *)
        echo "Unknown GCC_VERSION: $GCC_VERSION"
        exit 1;;
esac

GCC_PKGNAME="gcc-${GCC_VERSION}-${DEBPKG_HOST_GNU_TYPE}"
GCC_DEBPKG="${GCC_PKGNAME}_${GCC_V}_${DEB_BUILD_ARCH}.deb"

GCC_BASE_PKGNAME="gcc-${GCC_VERSION}-${DEBPKG_HOST_GNU_TYPE}-base"
GCC_BASE_DEBPKG="${GCC_BASE_PKGNAME}_${GCC_V}_${DEB_BUILD_ARCH}.deb"

CPP_PKGNAME="cpp-${GCC_VERSION}-${DEBPKG_HOST_GNU_TYPE}"
CPP_DEBPKG="${CPP_PKGNAME}_${GCC_V}_${DEB_BUILD_ARCH}.deb"

GXX_PKGNAME="g++-${GCC_VERSION}-${DEBPKG_HOST_GNU_TYPE}"
GXX_DEBPKG="${GXX_PKGNAME}_${GCC_V}_${DEB_BUILD_ARCH}.deb"

LIBGCC_CROSSPKGNAME="libgcc1-${DEB_HOST_ARCH}-cross"
LIBGCC_DEBPKG="libgcc1_${GCC_V}_${DEB_HOST_ARCH}.deb"

LIBSTDCXX_CROSSNAME="libstdc++${GXX_SONAME}-${DEB_HOST_ARCH}-cross"
LIBSTDCXX_DEBPKG="libstdc++${GXX_SONAME}_${GCC_V}_${DEB_HOST_ARCH}.deb"

LIBSTDCXX_DEV_CROSSNAME="libstdc++${GXX_SONAME}-${GCC_VERSION}-dev-${DEB_HOST_ARCH}-cross"
LIBSTDCXX_DEV_DEBPKG="libstdc++${GXX_SONAME}-${GCC_VERSION}-dev_${GCC_V}_${DEB_HOST_ARCH}.deb"

# -- --

# banner
echo "Building cross toolchain packages"
echo "---------------------------------"
echo "Host architecture: $MYARCH"
echo "Target cpu: $DEB_HOST_GNU_CPU"
echo "Target os: $DEB_HOST_GNU_SYSTEM"

# clobber dpkg-architecture environment
_env() {
	unset DEB_BUILD_ARCH
	unset DEB_BUILD_ARCH_OS
	unset DEB_BUILD_ARCH_CPU
	unset DEB_BUILD_GNU_CPU
	unset DEB_BUILD_GNU_SYSTEM
	unset DEB_BUILD_GNU_TYPE
	unset DEB_HOST_ARCH
	unset DEB_HOST_ARCH_OS
	unset DEB_HOST_ARCH_CPU
	unset DEB_HOST_GNU_CPU
	unset DEB_HOST_GNU_SYSTEM
	unset DEB_HOST_GNU_TYPE
}

# check for error condition, scream and die if needed
# This one should be called right after the command that
# can potentially trigger the error condition.
# $1 -- string describing the action (e.g., "installing")
# $2 -- name of the package, on which this action was performed
_checkerr() {
	local _err="$?"
	local _what="$1"
	local _pkg="$2"

	if [ $_err -ne 0 ]; then
		echo "Something wicked happened when $_what $_pkg, exiting."
		exit 1
	fi
}

# call dpkg-cross to convert a target package into a -cross package
# and perform cross-installation
# Takes paths to binary packages to be processed as arguments.
_crossinst() {
	echo "Dpkg-crossing following packages: $@"
	( cd "$SRC_DIR"; dpkg-cross -A -a ${DEB_HOST_ARCH} -b "$@" )
	( cd "$SRC_DIR"; $INSTALL_ROOTCMD dpkg-cross -A -a ${DEB_HOST_ARCH} -i "$@" )
}

# check if a package is installed
# $@ -- binary package names
_checkinst() {
	local _pkg
	local _status

	while [ -n "$1" ]; do
		_pkg="$1"
		_status=`dpkg -s "$_pkg" 2>/dev/null | grep '^Status: ' | cut -d' ' -f4`
		if [ "$?" != "0" -o "$_status" != "installed" ]; then
			exit
		fi

		shift
	done

	echo "installed"
}

# ------------------------------------------------------- #
# tools                                                   #
# ------------------------------------------------------- #
# These functions are responsible for building of each component
# in the toolchain. Names and code should be pretty straightforward.

############
# binutils #
############
do_binutils() {
    echo "do_binutils"

	if [ -z "`_checkinst $BINUTILS_PKGNAME`" -o -n "$FORCED_ACTION" ]; then
		build_binutils
		install_binutils
	else
		echo "binutils ($BINUTILS_PKGNAME) appears to be installed, skipping"
	fi
}

build_binutils() {
	pushd "$BINUTILS_DIR"
    ARCH=$DEB_HOST_ARCH
	( _env; env TARGET=$ARCH dpkg-buildpackage -us -uc -b )
	_checkerr building binutils
	popd
}

install_binutils() {
	$INSTALL_ROOTCMD dpkg -i "$SRC_DIR/$BINUTILS_DEBPKG"
	_checkerr installing binutils
}

########################
# linux-libc-dev #
########################
do_lld() {
    echo "do_lld"

	if [ -z "`_checkinst $LLD_CROSSPKGNAME`" -o -n "$FORCED_ACTION" ]; then
		build_lld
		install_lld
	else
		echo "linux-libc-dev ($LLD_CROSSPKGNAME) appears to be installed, skipping"
	fi
}

build_lld() {
	pushd "$LLD_DIR"
	dpkg-buildpackage -uc -us -a${DEB_HOST_ARCH} -b
	_checkerr building linux-libc-dev
	popd
}

install_lld() {
	_crossinst $LLD_DEBPKG
	_checkerr installing linux-libc-dev
}

# --- libraries ---

do_stage1_libc() {
    echo "do_stage1_libc"

    case "$DEB_HOST_GNU_SYSTEM" in
        *uclibc*) do_uclibc_bs;;
        *gnu*) do_glibc_bs;;
        *) echo "Unknown OS"; exit 1;;
    esac
}

do_stage2_libc() {
    echo "do_stage2_libc"

    case "$DEB_HOST_GNU_SYSTEM" in
        *uclibc*) do_uclibc;;
        *gnu*) do_glibc_bs2;;
        *) echo "Unknown OS"; exit 1;;
	esac
}

##########
# uclibc #
##########
do_uclibc_bs() {
	PKGNAME1="libuclibc-bootstrap-${DEB_HOST_ARCH}-cross"

	if [ -z "`_checkinst $PKGNAME1`" -o -n "$FORCED_ACTION" ]; then
		if [ -z "`_checkinst $PKGNAME1`" -o -n "$FORCED_ACTION" ]; then
			build_uclibc_bs
			install_uclibc_bs
		else
			echo "uclibc ($PKGNAME1) appears to be installed, skipping"
		fi
	else
		echo "uclibc ($PKGNAME1) appears to be installed, skipping"
	fi
}

build_uclibc_bs() {
	pushd "$UCLIBC_DIR"
	( env DEB_CROSS_BOOTSTRAP=yes \
		dpkg-buildpackage -uc -us -a${DEB_HOST_ARCH} \
		-b )
	_checkerr building "bootstrap uclibc"
	popd
}

install_uclibc_bs() {
	PKGNAME="libuclibc-bootstrap_${UCLIBC_V}_${DEB_HOST_ARCH}.deb"
	_crossinst $PKGNAME
	_checkerr installing "bootstrap uclibc"
}

do_uclibc() {
	PKGNAME="libuclibc0-${DEB_HOST_ARCH}-cross libuclibc-dev-${DEB_HOST_ARCH}-cross"

	if [ -z "`_checkinst $PKGNAME`" -o -n "$FORCED_ACTION" ]; then
		build_uclibc
		install_uclibc
	else
		echo "uclibc ($PKGNAME) appears to be installed, skipping"
	fi
}

build_uclibc() {
	$INSTALL_ROOTCMD dpkg -P libuclibc-bootstrap-${DEB_HOST_ARCH}-cross
	pushd "$UCLIBC_DIR"
	( dpkg-buildpackage -uc -us -a${DEB_HOST_ARCH} -b )
	_checkerr building uclibc
	popd
}

install_uclibc() {
	PKGPREFIX="${UCLIBC_V}_${DEB_HOST_ARCH}.deb"
	PKGNAMES="libuclibc-dev_${PKGPREFIX} ldso-uclibc_${PKGPREFIX} libc-uclibc_${PKGPREFIX} libm-uclibc_${PKGPREFIX} libpthread-uclibc_${PKGPREFIX} libdl-uclibc_${PKGPREFIX} librt-uclibc_${PKGPREFIX} libresolv-uclibc_${PKGPREFIX} libcrypt-uclibc_${PKGPREFIX} libutil-uclibc_${PKGPREFIX} libnsl-uclibc_${PKGPREFIX}"
	echo "Installing Uclibc packages: $PKGNAMES"
	_crossinst $PKGNAMES
	_checkerr installing uclibc
}

#########
# glibc #
#########
do_glibc_bs() {
	PKGNAME1="$GLIBC_DEV_HEADERS_CROSSPKGNAME"
	PKGNAME2="$GLIBC_CROSSPKGNAME $GLIBC_DEV_CROSSPKGNAME"

	if [ -z "`_checkinst $PKGNAME2`" -o -n "$FORCED_ACTION" ]; then
		if [ -z "`_checkinst $PKGNAME1`" -o -n "$FORCED_ACTION" ]; then
			build_glibc_bs
			install_glibc_bs
		else
			echo "glibc ($PKGNAME1) appears to be installed, skipping"
		fi
	else
		echo "glibc ($PKGNAME2) appears to be installed, skipping"
	fi
}

build_glibc_bs() {
	pushd "$GLIBC_DIR"
	( env DEB_CROSS_BOOTSTRAP=yes \
		dpkg-buildpackage -uc -us -a${DEB_HOST_ARCH} -b )
	_checkerr building "bootstrap glibc"
	popd
}

install_glibc_bs() {
	_crossinst $GLIBC_DEV_HEADERS_DEBPKG
	_checkerr installing "bootstrap glibc"
}

do_glibc_bs2() {
	PKGNAME="$GLIBC_CROSSPKGNAME $GLIBC_DEV_CROSSPKGNAME"

	if [ -z "`_checkinst $PKGNAME`" -o -n "$FORCED_ACTION" ]; then
		build_glibc_bs2
		install_glibc_bs2
	else
		echo "glibc ($PKGNAME) appears to be installed, skipping"
	fi
}

build_glibc_bs2() {
	pushd "$GLIBC_DIR"
	( env DEB_CROSS_BOOTSTRAP=second \
		dpkg-buildpackage -uc -us -a${DEB_HOST_ARCH} -b )
	_checkerr building glibc
	popd
}

install_glibc_bs2() {
	$INSTALL_ROOTCMD dpkg -P $GLIBC_DEV_HEADERS_CROSSPKGNAME
	_crossinst $GLIBC_DEBPKG $GLIBC_DEV_DEBPKG
	_checkerr installing glibc
}

do_glibc() {
	build_glibc
	install_glibc
}

build_glibc() {
	pushd "$GLIBC_DIR"
	( dpkg-buildpackage -uc -us -a${DEB_HOST_ARCH} -b )
	_checkerr building glibc
	popd
}

install_glibc() {
	_crossinst $GLIBC_DEBPKG $GLIBC_DEV_DEBPKG
	_checkerr installing glibc
}

#######
# gcc #
#######
do_stage1() {
    echo "do_stage1"

	PKGNAMES="$GCC_PKGNAME $GCC_BASE_PKGNAME $CPP_PKGNAME $LIBGCC_CROSSPKGNAME"

	if [ -z "`_checkinst $PKGNAMES`" -o -n "$FORCED_ACTION" ]; then
		do_stage1_libc
		build_gcc_bs
		install_gcc_bs
	else
		echo "base compiler ($PKGNAMES) appears to be installed, skipping"
	fi
}

build_gcc_bs() {
	pushd "$GCC_DIR"
	ARCH=${DEB_HOST_ARCH}
	( _env; env GCC_TARGET=${ARCH} DEB_CROSS=yes DEB_CROSS_BOOTSTRAP=yes \
		dpkg-buildpackage -uc -us -b )
	_checkerr building "bootstrap gcc"
	popd
}

install_gcc_bs() {
    _crossinst $LIBGCC_DEBPKG
    _checkerr installing "bootstrap gcc"

	PKGNAMES="$GCC_BASE_DEBPKG $GCC_DEBPKG $CPP_DEBPKG"
	( cd "$SRC_DIR"; $INSTALL_ROOTCMD dpkg -i --force-depends $PKGNAMES )
	_checkerr installing "bootstrap gcc"
}

do_stage2() {
	PKGNAMES="$GCC_PKGNAME $GCC_BASE_PKGNAME $CPP_PKGNAME $GXX_PKGNAME $LIBGCC_CROSSPKGNAME $LIBSTDCXX_CROSSNAME $LIBSTDCXX_DEV_CROSSNAME"

	if [ -z "`_checkinst $PKGNAMES`" -o -n "$FORCED_ACTION" ]; then
		do_stage2_libc
		build_gcc
		install_gcc
	else
		echo "compiler ($PKGNAMES) appears to be installed, skipping"
	fi
}

build_gcc() {
    PKGLIST_GCC="$GCC_PKGNAME $GCC_BASE_PKGNAME $CPP_PKGNAME $GXX_PKGNAME $LIBGCC_CROSSPKGNAME $LIBSTDCXX_CROSSNAME $LIBSTDCXX_DEV_CROSSNAME"
	$INSTALL_ROOTCMD dpkg -P ${PKGLIST_GCC}
	pushd "$GCC_DIR"
	ARCH=${DEB_HOST_ARCH}
	( _env; env GCC_TARGET=${ARCH} DEB_CROSS=yes DEB_TARGET_LIBCXX=yes \
		dpkg-buildpackage -uc -us )
	_checkerr building gcc
	popd
}

install_gcc() {
    _crossinst $LIBGCC_DEBPKG $LIBSTDCXX_DEBPKG $LIBSTDCXX_DEV_DEBPKG
	( cd "$SRC_DIR"; $INSTALL_ROOTCMD dpkg -i $GCC_BASE_DEBPKG $GCC_DEBPKG $CPP_DEBPKG $GXX_DEBPKG)
	_checkerr installing gcc
}

# -- toolchain metapackage --

install_cross_toolchain_pkg() {
	# render package's "Depends:" header
	BINUTILS_PKGDEP="$BINUTILS_PKGNAME (= ${BINUTILS_V})"

	LLD_PKGDEP="$LLD_CROSSPKGNAME (= ${LLD_V})"

	GCC_PKGDEP="$GCC_PKGNAME (= ${GCC_V}), $GCC_BASE_PKGNAME (= ${GCC_V}), $CPP_PKGNAME (= ${GCC_V}), $GXX_PKGNAME (= ${GCC_V}), $LIBGCC_CROSSPKGNAME (= ${GCC_V}), $LIBSTDCXX_CROSSNAME (= ${GCC_V}), $LIBSTDCXX_DEV_CROSSNAME (= ${GCC_V})"

    PROVIDES="build-essential-${DEB_BUILD_ARCH}-cross, cross-toolchain-${DEB_HOST_ARCH}-cross, cross-toolchain-${DEB_HOST_ARCH}-dcv1"
    CONFLICTS=""

	DEPENDS="$BINUTILS_PKGDEP, $LLD_PKGDEP, $GCC_PKGDEP,"

    case "$DEB_HOST_ARCH_OS" in
        uclibc)
	        UCLIBC_PKGDEP="libuclibc0-${DEB_HOST_ARCH}-cross (= ${UCLIBC_V}), libuclibc-dev-${DEB_HOST_ARCH}-cross (= ${UCLIBC_V})"
		    DEPENDS="$DEPENDS $UCLIBC_PKGDEP";;
	    linux)
		    GLIBC_PKGDEP="$GLIBC_CROSSPKGNAME (= ${GLIBC_V}), $GLIBC_DEV_CROSSPKGNAME (= ${GLIBC_V})"
		    DEPENDS="$DEPENDS $GLIBC_PKGDEP";;
        *)
            echo "Unknown OS"; exit 1;;
    esac

	TPKG_PKGNAME="${DEB_HOST_ARCH}-cross-toolchain"
	TPKG_PKGDIR=$SRC_DIR/$TPKG_PKGNAME

	TPKG_VERSION="${TP_VERSION}+binutils${BINUTILS_V}+linux-libc-dev${LLD_V}+gcc${GCC_V}"
    case "$DEB_HOST_ARCH_OS" in
        uclibc)
            TPKG_VERSION="${TPKG_VERSION}+uclibc${UCLIBC_V}";;
        linux)
            TPKG_VERSION="${TPKG_VERSION}+glibc${GLIBC_V}";;
        *)
            echo "Unknown OS"; exit 1;;
    esac

    TPKG_VERSION=$(echo $TPKG_VERSION | sed -e 's,-,+,g')

	mkdir -p $TPKG_PKGDIR/DEBIAN

	cat > $TPKG_PKGDIR/DEBIAN/control <<EOF
Package: $TPKG_PKGNAME
Version: $TPKG_VERSION
Section: host-tools
Priority: optional
Architecture: $DEB_BUILD_ARCH
Depends: $DEPENDS
Conflicts: $CONFLICTS
Provides: $PROVIDES
Source: toolchain-package
Installed-size: 0
Maintainer: $TPKG_MAINTAINER
Description: cross-compilation toolchain for $DEB_HOST_ARCH
 This is a metapackage that will get you a complete toolchain
 for cross-compilation into $DEB_HOST_ARCH target.
EOF

	dpkg-deb -b $TPKG_PKGDIR
    $INSTALL_ROOTCMD dpkg -i $SRC_DIR/${TPKG_PKGNAME}.deb
	dpkg-name -o $SRC_DIR/${TPKG_PKGNAME}.deb
}

do_binutils
do_lld
do_stage1
do_stage2

case "$DEB_HOST_GNU_SYSTEM" in
    *uclibc*)
        ;;
    *gnu*)
        build_glibc
        install_glibc;;
    *)
        echo "Unknown OS";;
esac

install_cross_toolchain_pkg

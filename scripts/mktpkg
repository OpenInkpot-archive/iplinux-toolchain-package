#!/bin/sh
#
# This mighty script is here to do the hard work of building cross-toolchains
# for SLIND. It is capable of operating in two modes:
#  1) building toolchain components from binary-packaged sources
#     (like, gcc-4.1-source which installs stuff to /usr/src/XXXX);
#     this is the default
#  2) building from source packages; this happens if you have
#     slind-maintainer-core package installed

# configs use this variable, so to make sure..
# Note that this is not the version, but part of package's name.
if [ -z "$GCC_VERSION" ]; then
	GCC_VERSION=4.1
fi

# our private stuff
if [ -f /etc/toolchain-package/pkglists.conf ]; then
	source /etc/toolchain-package/config
	source /etc/toolchain-package/pkglists.conf
else
	echo "Cannot find configuration file"
	exit 1
fi

# Check if the user wants to forcedly rebuild the whole toolchain
if [ "$1" = "--force" ]; then
	FORCED_ACTION=1
	shift
fi

if [ -z "$1" ]; then
	echo
	echo "Usage: $0 [--force] <target_arch>"
	echo
	echo "<target_arch>	must be a Debian architecture string."
	exit 1
fi

# presence of slindjob-config effectively indicates that we
# should build things from _source_ packages, not the binary-packaged
# sources; this is not entirely correct, but will do for now
SLINDJOB_CONFIG=~/.slindjob-config
POOLCARE_LIB=/usr/lib/slind-core/libpoolcare.sh
if [ ! -f "$SLINDJOB_CONFIG" ]; then
	SRC_DIR=/usr/src
else
	. $SLINDJOB_CONFIG

	# these are needed for libpoolcare.sh
	DEVSUITE=clydesdale
	[ -n "$SLIND_REPO" ] || SLIND_REPO="$HOME/grasp-out"
	REPODIR="$SLIND_REPO"
	. $POOLCARE_LIB
	[ -n "$SRC_DIR" ] || SRC_DIR=/tmp/tpkg

	# in this case, we require a second argument
	if [ -z "$2" ]; then
		echo "Maintainer mode requires suite name as the second argument"
		exit 1
	fi
fi

# SIGINT handler; removes cruft
# if $NO_CLEAN is set in the environment, this function does nothing
cleanup() {
	if [ -z "$NO_CLEAN" ]; then
		if [ -n "$SLIND_REPO" -a "$SRC_DIR" != "/usr/src" ]; then
			rm -rf "$SRC_DIR"
		fi
	fi
}

# Paths to sources; this is relevant for SRC_DIR=/usr/src case
BINUTILS_DIR=$SRC_DIR/binutils-source
LKH_DIR=$SRC_DIR/linux-kernel-headers-source
UCLIBC_DIR=$SRC_DIR/libuclibc-source
GLIBC_DIR=$SRC_DIR/glibc-source
GCC_DIR=$SRC_DIR/gcc-$GCC_VERSION

[ -n "$BUILD_ROOTCMD" ]   || BUILD_ROOTCMD=fakeroot
[ -n "$INSTALL_ROOTCMD" ] || INSTALL_ROOTCMD=sudo

# Options to apt-get source
[ -n "$APT_OPTS" ] || APT_OPTS="Acquire::Source-Symlinks=False"

TARGET="$1"
SUITE="$2"
MYARCH=`dpkg --print-architecture`
eval `dpkg-architecture -a$TARGET -s`

# get the source package
# $1 -- package name
# This fn will look up package's version in overrides db and
# download its sources to $SRC_DIR. Only used in SRC_DIR!=/usr/src case.
get_srcpkg() {
	local _pkgname="$1"

	local _version="`override_get_pkg_version $_pkgname $SUITE $TARGET`"
	( cd $SRC_DIR; apt-get -o $APT_OPTS source $_pkgname=$_version >&2 )

	local _uver="`echo $_version | sed -e 's,-.*,,'`"

	echo "$SRC_DIR/$_pkgname-$_uver"
}

# If we work in the (2) mode, clean up $SRC_DIR and populate
# it with sources.
if [ -f "$SLINDJOB_CONFIG" ]; then
	cleanup
	mkdir -p "$SRC_DIR"

	BINUTILS_DIR=`get_srcpkg binutils`
	LKH_DIR=`get_srcpkg linux-kernel-headers`
	UCLIBC_DIR=`get_srcpkg uclibc`
	GLIBC_DIR=`get_srcpkg glibc`
	GCC_DIR=`get_srcpkg gcc-$GCC_VERSION`
fi

# Set up ^C handler
trap cleanup INT

# banner
echo "Building cross toolchain packages"
echo "---------------------------------"
echo "Host architecture: $MYARCH"
echo "Target cpu: $DEB_HOST_GNU_CPU"
echo "Target os: $DEB_HOST_GNU_SYSTEM"

case "$DEB_HOST_ARCH_OS" in
	uclibc)
		LIBC_TARGET=uclibc
		echo "### Compiling for $LIBC_TARGET target"
		;;
	linux)
		LIBC_TARGET=gnu
		echo "### Compiling for glibc target"
		;;
	*)
		echo "Unexpected host os"
		exit 1
		;;
esac

# clobber dpkg-architecture environment
_env() {
	unset DEB_BUILD_ARCH
	unset DEB_BUILD_ARCH_OS
	unset DEB_BUILD_ARCH_CPU
	unset DEB_BUILD_GNU_CPU
	unset DEB_BUILD_GNU_SYSTEM
	unset DEB_BUILD_GNU_TYPE
	unset DEB_HOST_ARCH
	unset DEB_HOST_ARCH_OS
	unset DEB_HOST_ARCH_CPU
	unset DEB_HOST_GNU_CPU
	unset DEB_HOST_GNU_SYSTEM
	unset DEB_HOST_GNU_TYPE
}

# get source package's version from its debian/changelog
# $1 -- path to unpacked sources
_get_version() {
	local _dir="$1"
	cd "$_dir"; dpkg-parsechangelog|awk '/Version:/ {print $2}'
}

# check for error condition, scream and die if needed
# This one should be called right after the command that
# can potentially trigger the error condition.
# $1 -- string describing the action (e.g., "installing")
# $2 -- name of the package, on which this action was performed
_checkerr() {
	local _err="$?"
	local _what="$1"
	local _pkg="$2"

	if [ $_err -ne 0 ]; then
		echo "Something wicked happened when $_what $_pkg, exiting."
		exit 1
	fi
}

# call dpkg-cross to convert a target package into a -cross package
# and perform cross-installation
# Takes paths to binary packages to be processed as arguments.
_crossinst() {
	while [ -n "$1" ]; do
		local _pkgfile="$1"
		( cd "$SRC_DIR"; dpkg-cross -a${DEB_HOST_ARCH} -b "$_pkgfile" )
		( cd "$SRC_DIR"; $INSTALL_ROOTCMD dpkg-cross -a${DEB_HOST_ARCH} \
			-i "$_pkgfile" )
		shift
	done
}

# check if a package is installed
# $@ -- binary package names
_checkinst() {
	local _pkg
	local _status

	while [ -n "$1" ]; do
		_pkg="$1"
		_status=`dpkg -s "$_pkg" 2>/dev/null | grep '^Status: ' | cut -d' ' -f4`
		if [ "$?" != "0" -o "$_status" != "installed" ]; then
			exit
		fi

		shift
	done

	echo "installed"
}

# ------------------------------------------------------- #
# tools                                                   #
# ------------------------------------------------------- #
# These functions are responsible for building of each component
# in the toolchain. Names and code should be pretty straightforward.

############
# binutils #
############
do_binutils() {
	VERSION=`_get_version "$BINUTILS_DIR"`
	PKGNAME="binutils-${DEB_HOST_GNU_CPU}-linux-${LIBC_TARGET}"
	
	if [ -z "`_checkinst $PKGNAME`" -o -n "$FORCED_ACTION" ]; then
		build_binutils
		install_binutils
	else
		echo "binutils ($PKGNAME) appears to be installed, skipping"
	fi
}

build_binutils() {
	pushd "$BINUTILS_DIR"
	_ARCH=$DEB_HOST_ARCH
	( _env; env TARGET="$_ARCH" \
	  $BUILD_ROOTCMD debian/rules binary-source binary-cross clean-cross )
	_checkerr building binutils
	popd
}

install_binutils() {
	VERSION=`_get_version "$BINUTILS_DIR"`
	PKGNAME="binutils-${DEB_HOST_GNU_CPU}-linux-${LIBC_TARGET}_${VERSION}_${DEB_BUILD_ARCH}.deb"
	$INSTALL_ROOTCMD dpkg -i "$SRC_DIR/$PKGNAME"
	_checkerr installing binutils
}

########################
# linux-kernel-headers #
########################
do_lkh() {
	VERSION=`_get_version "$LKH_DIR"`
	PKGNAME="linux-kernel-headers-${DEB_HOST_ARCH}-cross"
	
	if [ -z "`_checkinst $PKGNAME`" -o -n "$FORCED_ACTION" ]; then
		build_lkh
		install_lkh
	else
		echo "linux-kernel-headers ($PKGNAME) appears to be installed, skipping"
	fi
}

build_lkh() {
	pushd "$LKH_DIR"
	dpkg-buildpackage -uc -us -r$BUILD_ROOTCMD -a${DEB_HOST_ARCH} -d
	_checkerr building linux-kernel-headers
	$BUILD_ROOTCMD debian/rules clean
	popd
}

install_lkh() {
	VERSION=`_get_version "$LKH_DIR"`
	PKGNAME="linux-kernel-headers_${VERSION}_${DEB_HOST_ARCH}.deb"
	_crossinst $PKGNAME
	_checkerr installing linux-kernel-headers
}

##### c libraries #####
do_stage1_libc() {
	if [ "$DEB_HOST_ARCH_OS" = "uclibc" ]; then
		do_uclibc_bs
	else
		do_glibc_bs
	fi
}

do_stage2_libc() {
	if [ "$DEB_HOST_ARCH_OS" = "uclibc" ]; then
		do_uclibc
	else
		do_glibc_bs2
	fi
}

##########
# uclibc #
##########
do_uclibc_bs() {
	VERSION=`_get_version "$UCLIBC_DIR"`
	PKGNAME1="libuclibc-dev-headers-${DEB_HOST_ARCH}-cross"
	PKGNAME2="libuclibc0-${DEB_HOST_ARCH}-cross libuclibc-dev-${DEB_HOST_ARCH}-cross"

	if [ -z "`_checkinst $PKGNAME2`" -o -n "$FORCED_ACTION" ]; then
		if [ -z "`_checkinst $PKGNAME1`" -o -n "$FORCED_ACTION" ]; then
			build_uclibc_bs
			install_uclibc_bs
		else
			echo "uclibc ($PKGNAME1) appears to be installed, skipping"
		fi
	else
		echo "uclibc ($PKGNAME2) appears to be installed, skipping"
	fi
}

build_uclibc_bs() {
	pushd "$UCLIBC_DIR"
	( env DEB_CROSS_BOOTSTRAP=yes \
		dpkg-buildpackage -uc -us -r$BUILD_ROOTCMD -a${DEB_HOST_ARCH} \
		-b )
	_checkerr building "bootstrap uclibc"
	$BUILD_ROOTCMD debian/rules clean
	popd
}

install_uclibc_bs() {
	VERSION=`_get_version "$UCLIBC_DIR"`
	PKGNAME="libuclibc-dev-headers_${VERSION}_${DEB_HOST_ARCH}.deb"
	_crossinst $PKGNAME
	_checkerr installing "bootstrap uclibc"
}

do_uclibc() {
	VERSION=`_get_version "$UCLIBC_DIR"`
	PKGNAME="libuclibc0-${DEB_HOST_ARCH}-cross libuclibc-dev-${DEB_HOST_ARCH}-cross"

	if [ -z "`_checkinst $PKGNAME`" -o -n "$FORCED_ACTION" ]; then
		build_uclibc
		install_uclibc
	else
		echo "uclibc ($PKGNAME) appears to be installed, skipping"
	fi
}

build_uclibc() {
	$INSTALL_ROOTCMD dpkg -P libuclibc-dev-headers-${DEB_HOST_ARCH}-cross
	pushd "$UCLIBC_DIR"
	( dpkg-buildpackage -uc -us -r$BUILD_ROOTCMD -a${DEB_HOST_ARCH} -b )
	_checkerr building uclibc
	$BUILD_ROOTCMD debian/rules clean
	popd
}

install_uclibc() {
	VERSION=`_get_version "$UCLIBC_DIR"`
	PKGPREFIX="${VERSION}_${DEB_HOST_ARCH}.deb"
	PKGNAMES="libuclibc0_${PKGPREFIX} libuclibc-dev_${PKGPREFIX}"
	_crossinst $PKGNAMES
	_checkerr installing uclibc
}

#########
# glibc #
#########
do_glibc_bs() {
	VERSION=`_get_version "$GLIBC_DIR"`
	PKGNAME1="libc6-dev-headers-${DEB_HOST_ARCH}-cross"
	PKGNAME2="libc6-${DEB_HOST_ARCH}-cross libc6-dev-${DEB_HOST_ARCH}-cross"

	if [ -z "`_checkinst $PKGNAME2`" -o -n "$FORCED_ACTION" ]; then
		if [ -z "`_checkinst $PKGNAME1`" -o -n "$FORCED_ACTION" ]; then
			build_glibc_bs
			install_glibc_bs
		else
			echo "glibc ($PKGNAME1) appears to be installed, skipping"
		fi
	else
		echo "glibc ($PKGNAME2) appears to be installed, skipping"
	fi
}

build_glibc_bs() {
	pushd "$GLIBC_DIR"
	( env DEB_CROSS_BOOTSTRAP=yes \
		dpkg-buildpackage -uc -us -r$BUILD_ROOTCMD -a${DEB_HOST_ARCH} \
		-b )
	_checkerr building "bootstrap glibc"
	$BUILD_ROOTCMD debian/rules clean
	popd
}

install_glibc_bs() {
	VERSION=`_get_version "$GLIBC_DIR"`
	PKGNAME="libc6-dev-headers_${VERSION}_${DEB_HOST_ARCH}.deb"
	_crossinst $PKGNAME
	_checkerr installing "bootstrap glibc"
}

do_glibc_bs2() {
	VERSION=`_get_version "$GLIBC_DIR"`
	PKGNAME="libc6-${DEB_HOST_ARCH}-cross libc6-dev-${DEB_HOST_ARCH}-cross"

	if [ -z "`_checkinst $PKGNAME`" -o -n "$FORCED_ACTION" ]; then
		build_glibc_bs2
		install_glibc_bs2
	else
		echo "glibc ($PKGNAME) appears to be installed, skipping"
	fi
}

build_glibc_bs2() {
	pushd "$GLIBC_DIR"
	( env DEB_CROSS_BOOTSTRAP=second \
		dpkg-buildpackage -uc -us -r$BUILD_ROOTCMD -a${DEB_HOST_ARCH} \
		-b )
	_checkerr building glibc
	$BUILD_ROOTCMD debian/rules clean
	popd
}

install_glibc_bs2() {
	$INSTALL_ROOTCMD dpkg -P libc6-dev-headers-${DEB_HOST_ARCH}-cross
	VERSION=`_get_version "$GLIBC_DIR"`
	PKGPREFIX="${VERSION}_${DEB_HOST_ARCH}.deb"
	PKGNAMES="libc6_${PKGPREFIX} libc6-dev_${PKGPREFIX}"
	_crossinst $PKGNAMES
	_checkerr installing glibc
}

do_glibc() {
	build_glibc
	install_glibc
}

build_glibc() {
	pushd "$GLIBC_DIR"
	( dpkg-buildpackage -uc -us -r$BUILD_ROOTCMD -a${DEB_HOST_ARCH} -b )
	_checkerr building glibc
	$BUILD_ROOTCMD debian/rules clean
	popd
}

install_glibc() {
	VERSION=`_get_version "$GLIBC_DIR"`
	PKGPREFIX="${VERSION}_${DEB_HOST_ARCH}.deb"
	PKGNAMES="libc6_${PKGPREFIX} libc6-dev_${PKGPREFIX}"
	_crossinst $PKGNAMES
	_checkerr installing glibc
}

#######
# gcc #
#######
do_stage1() {
	VERSION=`_get_version "$GCC_DIR"`
	PKGPREFIX1="${GCC_VERSION}-${DEB_HOST_GNU_TYPE}"
	PKGPREFIX2="${DEB_HOST_ARCH}-cross"
	PKGNAMES="gcc-${PKGPREFIX1} cpp-${PKGPREFIX1} libgcc1-${PKGPREFIX2}"

	if [ -z "`_checkinst $PKGNAMES`" -o -n "$FORCED_ACTION" ]; then
		do_stage1_libc
		build_gcc_bs
		install_gcc_bs
	else
		echo "base compiler ($PKGNAMES) appears to be installed, skipping"
	fi
}

build_gcc_bs() {
	pushd "$GCC_DIR"
	ARCH=${DEB_HOST_ARCH}
	( _env; env GCC_TARGET=${ARCH} DEB_CROSS_BOOTSTRAP=yes \
		dpkg-buildpackage -uc -us -r$BUILD_ROOTCMD -b -d )
	_checkerr building "bootstrap gcc"
	$BUILD_ROOTCMD debian/rules clean
	popd
}

install_gcc_bs() {
	VERSION=`_get_version "$GCC_DIR"`
	PKGPREFIX1="${GCC_VERSION}-${DEB_HOST_GNU_TYPE}_${VERSION}_${DEB_BUILD_ARCH}.deb"
	PKGPREFIX2="${DEB_HOST_ARCH}-cross_${VERSION}_all.deb"
	PKGNAMES="gcc-${PKGPREFIX1} cpp-${PKGPREFIX1} libgcc1-${PKGPREFIX2}"
	( cd "$SRC_DIR"; $INSTALL_ROOTCMD dpkg -i $PKGNAMES )
	_checkerr installing "bootstrap gcc"
}

do_stage2() {
	VERSION=`_get_version "$GCC_DIR"`
	PKGPREFIX1="${GCC_VERSION}-${DEB_HOST_GNU_TYPE}"
	PKGPREFIX2="${DEB_HOST_ARCH}-cross"
	PKGNAMES="gcc-${PKGPREFIX1} cpp-${PKGPREFIX1} g++-${PKGPREFIX1} libgcc1-${PKGPREFIX2} libstdc++6-${PKGPREFIX2} libstdc++6-dev-${PKGPREFIX2}"

	if [ -z "`_checkinst $PKGNAMES`" -o -n "$FORCED_ACTION" ]; then
		do_stage2_libc
		build_gcc
		install_gcc
	else
		echo "compiler ($PKGNAMES) appears to be installed, skipping"
	fi
}

build_gcc() {
	$INSTALL_ROOTCMD dpkg -P ${PKGLIST_GCC}
	pushd "$GCC_DIR"
	ARCH=${DEB_HOST_ARCH}
	( _env; env GCC_TARGET=${ARCH} DEB_TARGET_LIBCXX=yes \
		dpkg-buildpackage -uc -us -r$BUILD_ROOTCMD -d )
	_checkerr building gcc
	$BUILD_ROOTCMD debian/rules clean
	popd
}

install_gcc() {
	VERSION=`_get_version "$GCC_DIR"`
	PKGPREFIX1="${GCC_VERSION}-${DEB_HOST_GNU_TYPE}_${VERSION}_${DEB_BUILD_ARCH}.deb"
	PKGPREFIX2="${DEB_HOST_ARCH}-cross_${VERSION}_all.deb"
	PKGNAMES="gcc-${PKGPREFIX1} cpp-${PKGPREFIX1} g++-${PKGPREFIX1} libgcc1-${PKGPREFIX2} libstdc++6-${PKGPREFIX2} libstdc++6-dev-${PKGPREFIX2}"
	( cd "$SRC_DIR"; $INSTALL_ROOTCMD dpkg -i $PKGNAMES )
	_checkerr installing gcc
}

make_meta_tpkg() {
	# render package's "Depends:" header
	BINUTILS_VERSION=`_get_version "$BINUTILS_DIR"`
	BINUTILS_PKGDEP="binutils-${DEB_HOST_GNU_TYPE} (= ${BINUTILS_VERSION})"

	LKH_VERSION=`_get_version "$LKH_DIR"`
	LKH_PKGDEP="linux-kernel-headers-${DEB_HOST_ARCH}-cross (= ${LKH_VERSION})"

	UCLIBC_VERSION=`_get_version "$UCLIBC_DIR"`
	UCLIBC_PKGDEP="libuclibc0-${DEB_HOST_ARCH}-cross (= ${UCLIBC_VERSION}), libuclibc-dev-${DEB_HOST_ARCH}-cross (= ${UCLIBC_VERSION})"

	GLIBC_VERSION=`_get_version "$GLIBC_DIR"`
	GLIBC_PKGDEP="libc6-${DEB_HOST_ARCH}-cross (= ${GLIBC_VERSION}), libc6-dev-${DEB_HOST_ARCH}-cross (= ${GLIBC_VERSION})"

	GCCPKG_VERSION=`_get_version "$GCC_DIR"`
	GCC_PKGDEP="gcc-${GCC_VERSION}-${DEB_HOST_GNU_TYPE} (= ${GCCPKG_VERSION}), cpp-${GCC_VERSION}-${DEB_HOST_GNU_TYPE} (= ${GCCPKG_VERSION}), g++-${GCC_VERSION}-${DEB_HOST_GNU_TYPE} (= ${GCCPKG_VERSION}), libgcc1-${DEB_HOST_ARCH}-cross (= ${GCCPKG_VERSION}), libstdc++6-${DEB_HOST_ARCH}-cross (= ${GCCPKG_VERSION}), libstdc++6-dev-${DEB_HOST_ARCH}-cross (= ${GCCPKG_VERSION})"

	DEPENDS="northern-cross, $BINUTILS_PKGDEP, $LKH_PKGDEP, $GCC_PKGDEP, "
	if [ "$DEB_HOST_ARCH_OS" = "uclibc" ]; then
		DEPENDS="$DEPENDS $UCLIBC_PKGDEP"
	else
		DEPENDS="$DEPENDS $GLIBC_PKGDEP"
	fi

	if [ -z "$TPKG_MAINTAINER" ]; then
		TPKG_MAINTAINER="Alexander Shishkin <virtuoso@slind.org>"
	fi

	TPKG_PKGNAME="${DEB_HOST_ARCH}-cross-toolchain"
	TPKG_PKGDIR=$SRC_DIR/$TPKG_PKGNAME
	
	TPKG_VERSION=`override_get_pkg_version toolchain-package $SUITE $TARGET`
	[ -n "$TPKG_VERSION" ] || \
		TPKG_VERSION="`dpkg -s toolchain-package | grep '^Version: ' | cut -d' ' -f2`"

	mkdir -p $TPKG_PKGDIR/DEBIAN

	cat > $TPKG_PKGDIR/DEBIAN/control <<EOF
Package: $TPKG_PKGNAME
Version: $TPKG_VERSION
Section: host-tools
Priority: optional
Architecture: $DEB_BUILD_ARCH
Depends: $DEPENDS
Source: toolchain-package
Provides: build-essential-${DEB_BUILD_ARCH}-cross, cross-toolchain-${DEB_HOST_ARCH}-cross, cross-toolchain-${DEB_HOST_ARCH}-dcv1
Installed-size: 0
Maintainer: $TPKG_MAINTAINER
Description: cross-compilation toolchain for $DEB_HOST_ARCH
 This is a metapackage that will get you a complete toolchain
 for cross-compilation into $DEB_HOST_ARCH target.
EOF

	dpkg-deb -b $TPKG_PKGDIR
	$INSTALL_ROOTCMD dpkg -i $SRC_DIR/${TPKG_PKGNAME}.deb
	dpkg-name $SRC_DIR/${TPKG_PKGNAME}.deb
}

do_binutils
do_lkh
do_stage1
do_stage2
if [ "$DEB_HOST_ARCH_OS" = "linux" ]; then
	build_glibc
	install_glibc
fi

make_meta_tpkg


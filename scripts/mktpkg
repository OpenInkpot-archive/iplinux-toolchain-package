#!/bin/bash
#
# OpenInkpot cross-toolchain builder, heavily based on SLIND cross-toolchain
# builder.
#
# It is capable of operating in three modes:
#
#  1) building toolchain components from binary-packaged sources (like,
#  gcc-4.1-source which installs stuff to /usr/src/XXXX); this is the default
#
#  2) building from git; this is enabled by option --maintainer-mode and passing
#  --<pkg>-tag= options. In this mode mktpkg obtains sources by checking out
#  latest source code from git, by using passed tags and by looking at binary
#  repository and finding out proper tags for components which are not specified
#  in command line.
#
#  3) building from provided source code. This is enabled by option
#  --manual-mode and providing source code in target-dir, in directories named
#  after components (binutils, linux-kernel-headers, gcc-${VERSION}, glibc,
#  uclibc).
#

TP_VERSION=0.3
SUITE=asimov
BDBT=/usr/share/bashdb/bashdb-trace

usage() {
	echo
	echo "Usage: $0 [--force] [--maintainer-mode] [--suite=<suite>] <target-arch> <target-dir>"
	echo
	echo "<target-arch> must be a Debian architecture string."
    echo "<build-dir> must be a writable directory"
    echo "<suite> must be a OpenInkpot suite, defaults to $SUITE."
}

if [ -n "$DEBUG" ]; then
    [ -f $BDBT ] || (echo "Please instal bashdb"; exit 1)
    source $BDBT -q
    _Dbg_set_trace ; : ; :
fi

if [ -n "$TRACE" ]; then
    [ -f $BDBT ] || (echo "Please install bashdb"; exit 1)
    source $BDBT -q
    _Dbg_linetrace_on
fi

# configs use this variable, so to make sure..
# Note that this is not the version, but part of package's name.
if [ -z "$GCC_VERSION" ]; then
	GCC_VERSION=4.3
fi

TEMP=$(getopt -o h --longoptions git-mode,manual-mode,binutils-tag:,lkh-tag:,gcc-tag:,glibc-tag:,uclibc-tag: -n $0 -- "$@")
if [ $? != 0 ]; then
    exit 1
fi
eval set -- "$TEMP"

while true; do
    case "$1" in
        --help) usage; exit;;
        --force) FORCED_ACTION=1; shift;;
        --git-mode) GIT_MODE=1; shift;;
        --manual-mode) MANUAL_MODE=1; shift;;
        # lkh_TAG, binutils_TAG...
        --*-tag) eval "${${1#--}%-tag}_TAG=$2"; shift 2;;
        --suite) SUITE=$2; shift 2;;
        --) shift; break;;
        *) exit 1;;
    esac
done

TARGET="$1"
SRC_DIR=`pwd`

# SIGINT handler; removes cruft
# if $NO_CLEAN is set in the environment, this function does nothing
cleanup() {
	if [ -z "$NO_CLEAN" ]; then
		if [ "$SRC_DIR" != "/usr/src" ]; then
			rm -rf "$SRC_DIR"
		fi
	fi
}

# Paths to sources; this is relevant for SRC_DIR=/usr/src case
BINUTILS_DIR=$SRC_DIR/binutils-source
LKH_DIR=$SRC_DIR/linux-kernel-headers-source
UCLIBC_DIR=$SRC_DIR/libuclibc-source
GLIBC_DIR=$SRC_DIR/glibc-source
GCC_DIR=$SRC_DIR/gcc-$GCC_VERSION

[ -n "$BUILD_ROOTCMD" ] || BUILD_ROOTCMD=fakeroot
[ -n "$INSTALL_ROOTCMD" ] || INSTALL_ROOTCMD=sudo

# Options to apt-get source
[ -n "$APT_OPTS" ] || APT_OPTS="Acquire::Source-Symlinks=False"

MYARCH=`dpkg --print-architecture`

ARCH_INFO=$(dpkg-architecture -a$TARGET -s)
if [ -z "$ARCH_INFO" ]; then
    echo "Unknown architecture: $TARGET"
    exit 1
fi
eval "$ARCH_INFO"

# our private stuff
if [ -f /etc/toolchain-package/pkglists.conf ]; then
	source /etc/toolchain-package/config
	source /etc/toolchain-package/pkglists.conf
else
	echo "Cannot find configuration file"
	exit 1
fi

# get the source package
# $1 -- package name
get_srcpkg() {
	local _pkgname="$1"

	( cd $SRC_DIR; apt-get -o $APT_OPTS source $_pkgname >&2 )
	local _version=$(apt-cache showsrc $_pkgname | awk '/^Version:/ { print $2 }' | sed -e 's,-.*,,')

	echo "$SRC_DIR/$_pkgname-$_version"
}

# Clean up $SRC_DIR and populate
# it with sources.
if [ -n $MAINTAINER_MODE ]; then
	cleanup
	mkdir -p "$SRC_DIR"

	BINUTILS_DIR=`get_srcpkg binutils`
	LKH_DIR=`get_srcpkg linux-kernel-headers`
    case "$DEB_HOST_ARCH_OS" in
        uclibc) UCLIBC_DIR=`get_srcpkg uclibc`;;
        linux) GLIBC_DIR=`get_srcpkg glibc`;;
        *) echo "Unknown OS"; exit 1;;
    esac
	GCC_DIR=`get_srcpkg gcc-$GCC_VERSION`
elif [ -n $MANUAL_MODE ]; then
    :
else
    cleanup
    mkdir -p "$SRC_DIR"

    PKGS="binutils-source linux-kernel-headers-source gcc-${GCC_VERSION}-source"
    case "$DEB_HOST_ARCH_OS" in
        uclibc) PKGS="${PKGS} uclibc-source";;
        linux) PKGS="${PKGS} glibc-source";;
        *) echo "Unknown OS"; exit 1;;
    esac

    $INSTALL_ROOTCMD apt-get -y --force-yes install $PKGS

    for i in binutils-source linux-kernel-headers-source gcc-${GCC_VERSION}-source; do
        cp -r "/usr/src/$i" $SRC_DIR
    done

    case "$DEB_HOST_ARCH_OS" in
        uclibc) cp -r /usr/src/uclibc-source $SRC_DIR;;
        linux) cp -r /usr/sr/glibc-source $SRC_DIR;;
        *) echo "Unknown OS"; exit 1;;
    esac
fi

# Set up ^C handler
trap cleanup INT

# banner
echo "Building cross toolchain packages"
echo "---------------------------------"
echo "Host architecture: $MYARCH"
echo "Target cpu: $DEB_HOST_GNU_CPU"
echo "Target os: $DEB_HOST_GNU_SYSTEM"

# clobber dpkg-architecture environment
_env() {
	unset DEB_BUILD_ARCH
	unset DEB_BUILD_ARCH_OS
	unset DEB_BUILD_ARCH_CPU
	unset DEB_BUILD_GNU_CPU
	unset DEB_BUILD_GNU_SYSTEM
	unset DEB_BUILD_GNU_TYPE
	unset DEB_HOST_ARCH
	unset DEB_HOST_ARCH_OS
	unset DEB_HOST_ARCH_CPU
	unset DEB_HOST_GNU_CPU
	unset DEB_HOST_GNU_SYSTEM
	unset DEB_HOST_GNU_TYPE
}

# get source package's version from its debian/changelog
# $1 -- path to unpacked sources
_get_version() {
	local _dir="$1"
	cd "$_dir"; dpkg-parsechangelog|awk '/Version:/ {print $2}'
}

# check for error condition, scream and die if needed
# This one should be called right after the command that
# can potentially trigger the error condition.
# $1 -- string describing the action (e.g., "installing")
# $2 -- name of the package, on which this action was performed
_checkerr() {
	local _err="$?"
	local _what="$1"
	local _pkg="$2"

	if [ $_err -ne 0 ]; then
		echo "Something wicked happened when $_what $_pkg, exiting."
		exit 1
	fi
}

# call dpkg-cross to convert a target package into a -cross package
# and perform cross-installation
# Takes paths to binary packages to be processed as arguments.
_crossinst() {
	while [ -n "$1" ]; do
		local _pkgfile="$1"
		( cd "$SRC_DIR"; dpkg-cross -a${DEB_HOST_ARCH} -b "$_pkgfile" )
		( cd "$SRC_DIR"; $INSTALL_ROOTCMD dpkg-cross -a${DEB_HOST_ARCH} \
			-i "$_pkgfile" )
		shift
	done
}

# check if a package is installed
# $@ -- binary package names
_checkinst() {
	local _pkg
	local _status

	while [ -n "$1" ]; do
		_pkg="$1"
		_status=`dpkg -s "$_pkg" 2>/dev/null | grep '^Status: ' | cut -d' ' -f4`
		if [ "$?" != "0" -o "$_status" != "installed" ]; then
			exit
		fi

		shift
	done

	echo "installed"
}

# ------------------------------------------------------- #
# tools                                                   #
# ------------------------------------------------------- #
# These functions are responsible for building of each component
# in the toolchain. Names and code should be pretty straightforward.

############
# binutils #
############
do_binutils() {
    echo "do_binutils"

	VERSION=`_get_version "$BINUTILS_DIR"`
	PKGNAME="binutils-${DEB_HOST_GNU_TYPE}"
	
	if [ -z "`_checkinst $PKGNAME`" -o -n "$FORCED_ACTION" ]; then
		build_binutils
		install_binutils
	else
		echo "binutils ($PKGNAME) appears to be installed, skipping"
	fi
}

build_binutils() {
	pushd "$BINUTILS_DIR"
	_ARCH=$DEB_HOST_ARCH
	( _env; env TARGET="$_ARCH" \
	  $BUILD_ROOTCMD debian/rules binary-source binary-cross clean-cross )
	_checkerr building binutils
	popd
}

install_binutils() {
	VERSION=`_get_version "$BINUTILS_DIR"`
	PKGNAME="binutils-${DEB_HOST_GNU_TYPE}_${VERSION}_${DEB_BUILD_ARCH}.deb"
	$INSTALL_ROOTCMD dpkg -i "$SRC_DIR/$PKGNAME"
	_checkerr installing binutils
}

########################
# linux-kernel-headers #
########################
do_lkh() {
    echo "do_lkh"

	VERSION=`_get_version "$LKH_DIR"`
	PKGNAME="linux-kernel-headers-${DEB_HOST_ARCH}-cross"
	
	if [ -z "`_checkinst $PKGNAME`" -o -n "$FORCED_ACTION" ]; then
		build_lkh
		install_lkh
	else
		echo "linux-kernel-headers ($PKGNAME) appears to be installed, skipping"
	fi
}

build_lkh() {
	pushd "$LKH_DIR"
	dpkg-buildpackage -uc -us -r$BUILD_ROOTCMD -a${DEB_HOST_ARCH} -d
	_checkerr building linux-kernel-headers
	$BUILD_ROOTCMD debian/rules clean
	popd
}

install_lkh() {
	VERSION=`_get_version "$LKH_DIR"`
	PKGNAME="linux-kernel-headers_${VERSION}_${DEB_HOST_ARCH}.deb"
	_crossinst $PKGNAME
	_checkerr installing linux-kernel-headers
}

##### c libraries #####
do_stage1_libc() {
    echo "do_stage1_libc"

    case "$DEB_HOST_ARCH_OS" in
        uclibc) do_uclibc_bs;;
   		linux) do_glibc_bs;;
        *) echo "Unknown OS"; exit 1;;
    esac
}

do_stage2_libc() {
    echo "do_stage2_libc"

    case "$DEB_HOST_ARCH_OS" in
        uclibc) do_uclibc;;
        linux) do_glibc_bs2;;
        *) echo "Unknown OS"; exit 1;;
	esac
}

##########
# uclibc #
##########
do_uclibc_bs() {
	VERSION=`_get_version "$UCLIBC_DIR"`
	PKGNAME1="libuclibc-dev-headers-${DEB_HOST_ARCH}-cross"
	PKGNAME2="libuclibc0-${DEB_HOST_ARCH}-cross libuclibc-dev-${DEB_HOST_ARCH}-cross"

	if [ -z "`_checkinst $PKGNAME2`" -o -n "$FORCED_ACTION" ]; then
		if [ -z "`_checkinst $PKGNAME1`" -o -n "$FORCED_ACTION" ]; then
			build_uclibc_bs
			install_uclibc_bs
		else
			echo "uclibc ($PKGNAME1) appears to be installed, skipping"
		fi
	else
		echo "uclibc ($PKGNAME2) appears to be installed, skipping"
	fi
}

build_uclibc_bs() {
	pushd "$UCLIBC_DIR"
	( env DEB_CROSS_BOOTSTRAP=yes \
		dpkg-buildpackage -uc -us -r$BUILD_ROOTCMD -a${DEB_HOST_ARCH} \
		-b )
	_checkerr building "bootstrap uclibc"
	$BUILD_ROOTCMD debian/rules clean
	popd
}

install_uclibc_bs() {
	VERSION=`_get_version "$UCLIBC_DIR"`
	PKGNAME="libuclibc-dev-headers_${VERSION}_${DEB_HOST_ARCH}.deb"
	_crossinst $PKGNAME
	_checkerr installing "bootstrap uclibc"
}

do_uclibc() {
	VERSION=`_get_version "$UCLIBC_DIR"`
	PKGNAME="libuclibc0-${DEB_HOST_ARCH}-cross libuclibc-dev-${DEB_HOST_ARCH}-cross"

	if [ -z "`_checkinst $PKGNAME`" -o -n "$FORCED_ACTION" ]; then
		build_uclibc
		install_uclibc
	else
		echo "uclibc ($PKGNAME) appears to be installed, skipping"
	fi
}

build_uclibc() {
	$INSTALL_ROOTCMD dpkg -P libuclibc-dev-headers-${DEB_HOST_ARCH}-cross
	pushd "$UCLIBC_DIR"
	( dpkg-buildpackage -uc -us -r$BUILD_ROOTCMD -a${DEB_HOST_ARCH} -b )
	_checkerr building uclibc
	$BUILD_ROOTCMD debian/rules clean
	popd
}

install_uclibc() {
	VERSION=`_get_version "$UCLIBC_DIR"`
	PKGPREFIX="${VERSION}_${DEB_HOST_ARCH}.deb"
	PKGNAMES="libuclibc0_${PKGPREFIX} libuclibc-dev_${PKGPREFIX}"
	_crossinst $PKGNAMES
	_checkerr installing uclibc
}

#########
# glibc #
#########
do_glibc_bs() {
	VERSION=`_get_version "$GLIBC_DIR"`
	PKGNAME1="libc6-dev-headers-${DEB_HOST_ARCH}-cross"
	PKGNAME2="libc6-${DEB_HOST_ARCH}-cross libc6-dev-${DEB_HOST_ARCH}-cross"

	if [ -z "`_checkinst $PKGNAME2`" -o -n "$FORCED_ACTION" ]; then
		if [ -z "`_checkinst $PKGNAME1`" -o -n "$FORCED_ACTION" ]; then
			build_glibc_bs
			install_glibc_bs
		else
			echo "glibc ($PKGNAME1) appears to be installed, skipping"
		fi
	else
		echo "glibc ($PKGNAME2) appears to be installed, skipping"
	fi
}

build_glibc_bs() {
	pushd "$GLIBC_DIR"
	( env DEB_CROSS_BOOTSTRAP=yes \
		dpkg-buildpackage -uc -us -r$BUILD_ROOTCMD -a${DEB_HOST_ARCH} \
		-b )
	_checkerr building "bootstrap glibc"
	$BUILD_ROOTCMD debian/rules clean
	popd
}

install_glibc_bs() {
	VERSION=`_get_version "$GLIBC_DIR"`
	PKGNAME="libc6-dev-headers_${VERSION}_${DEB_HOST_ARCH}.deb"
	_crossinst $PKGNAME
	_checkerr installing "bootstrap glibc"
}

do_glibc_bs2() {
	VERSION=`_get_version "$GLIBC_DIR"`
	PKGNAME="libc6-${DEB_HOST_ARCH}-cross libc6-dev-${DEB_HOST_ARCH}-cross"

	if [ -z "`_checkinst $PKGNAME`" -o -n "$FORCED_ACTION" ]; then
		build_glibc_bs2
		install_glibc_bs2
	else
		echo "glibc ($PKGNAME) appears to be installed, skipping"
	fi
}

build_glibc_bs2() {
	pushd "$GLIBC_DIR"
	( env DEB_CROSS_BOOTSTRAP=second \
		dpkg-buildpackage -uc -us -r$BUILD_ROOTCMD -a${DEB_HOST_ARCH} \
		-b )
	_checkerr building glibc
	$BUILD_ROOTCMD debian/rules clean
	popd
}

install_glibc_bs2() {
	$INSTALL_ROOTCMD dpkg -P libc6-dev-headers-${DEB_HOST_ARCH}-cross
	VERSION=`_get_version "$GLIBC_DIR"`
	PKGPREFIX="${VERSION}_${DEB_HOST_ARCH}.deb"
	PKGNAMES="libc6_${PKGPREFIX} libc6-dev_${PKGPREFIX}"
	_crossinst $PKGNAMES
	_checkerr installing glibc
}

do_glibc() {
	build_glibc
	install_glibc
}

build_glibc() {
	pushd "$GLIBC_DIR"
	( dpkg-buildpackage -uc -us -r$BUILD_ROOTCMD -a${DEB_HOST_ARCH} -b )
	_checkerr building glibc
	$BUILD_ROOTCMD debian/rules clean
	popd
}

install_glibc() {
	VERSION=`_get_version "$GLIBC_DIR"`
	PKGPREFIX="${VERSION}_${DEB_HOST_ARCH}.deb"
	PKGNAMES="libc6_${PKGPREFIX} libc6-dev_${PKGPREFIX}"
	_crossinst $PKGNAMES
	_checkerr installing glibc
}

#######
# gcc #
#######
do_stage1() {
    echo "do_stage1"

	VERSION=`_get_version "$GCC_DIR"`
	PKGPREFIX1="${GCC_VERSION}-${DEB_HOST_GNU_TYPE}"
	PKGPREFIX2="${DEB_HOST_ARCH}-cross"
	PKGNAMES="gcc-${PKGPREFIX1} cpp-${PKGPREFIX1} libgcc1-${PKGPREFIX2}"

	if [ -z "`_checkinst $PKGNAMES`" -o -n "$FORCED_ACTION" ]; then
		do_stage1_libc
		build_gcc_bs
		remove_native_toolchain
		install_gcc_bs
		if [ "x$MYARCH" = "x$DEB_HOST_ARCH" ]; then
		    install_virtual_bs_toolchain
		fi
	else
		echo "base compiler ($PKGNAMES) appears to be installed, skipping"
	fi
}

build_gcc_bs() {
	pushd "$GCC_DIR"
	ARCH=${DEB_HOST_ARCH}
	( _env; env GCC_TARGET=${ARCH} DEB_CROSS_BOOTSTRAP=yes \
		dpkg-buildpackage -uc -us -r$BUILD_ROOTCMD -b -d )
	_checkerr building "bootstrap gcc"
	$BUILD_ROOTCMD debian/rules clean
	popd
}

install_gcc_bs() {
	VERSION=`_get_version "$GCC_DIR"`
	PKGPREFIX1="${GCC_VERSION}-${DEB_HOST_GNU_TYPE}_${VERSION}_${DEB_BUILD_ARCH}.deb"
	PKGPREFIX2="${DEB_HOST_ARCH}-cross_${VERSION}_all.deb"
	PKGNAMES="gcc-${PKGPREFIX1} cpp-${PKGPREFIX1} libgcc1-${PKGPREFIX2}"
	( cd "$SRC_DIR"; $INSTALL_ROOTCMD dpkg -i $PKGNAMES )
	_checkerr installing "bootstrap gcc"
}

do_stage2() {
	VERSION=`_get_version "$GCC_DIR"`
	PKGPREFIX1="${GCC_VERSION}-${DEB_HOST_GNU_TYPE}"
	PKGPREFIX2="${DEB_HOST_ARCH}-cross"
	PKGNAMES="gcc-${PKGPREFIX1} cpp-${PKGPREFIX1} g++-${PKGPREFIX1} libgcc1-${PKGPREFIX2} libstdc++6-${PKGPREFIX2} libstdc++6-dev-${PKGPREFIX2}"

	if [ -z "`_checkinst $PKGNAMES`" -o -n "$FORCED_ACTION" ]; then
		do_stage2_libc
		if [ "x$MYARCH" = "x$DEB_HOST_ARCH" ]; then
		    remove_cross_bs_toolchain
		fi
		install_native_toolchain
		build_gcc
		remove_native_toolchain
		install_gcc
		if [ "x$MYARCH" = "x$DEB_HOST_ARCH" ]; then
		    install_virtual_toolchain
		fi
	else
		echo "compiler ($PKGNAMES) appears to be installed, skipping"
	fi
}

build_gcc() {
	$INSTALL_ROOTCMD dpkg -P ${PKGLIST_GCC}
	pushd "$GCC_DIR"
	ARCH=${DEB_HOST_ARCH}
	( _env; env GCC_TARGET=${ARCH} DEB_TARGET_LIBCXX=yes \
		dpkg-buildpackage -uc -us -r$BUILD_ROOTCMD -d )
	_checkerr building gcc
	$BUILD_ROOTCMD debian/rules clean
	popd
}

install_gcc() {
	VERSION=`_get_version "$GCC_DIR"`
	PKGPREFIX1="${GCC_VERSION}-${DEB_HOST_GNU_TYPE}_${VERSION}_${DEB_BUILD_ARCH}.deb"
	PKGPREFIX2="${DEB_HOST_ARCH}-cross_${VERSION}_all.deb"
	PKGNAMES="gcc-${PKGPREFIX1} cpp-${PKGPREFIX1} g++-${PKGPREFIX1} libgcc1-${PKGPREFIX2} libstdc++6-${PKGPREFIX2} libstdc++6-dev-${PKGPREFIX2}"
	( cd "$SRC_DIR"; $INSTALL_ROOTCMD dpkg -i $PKGNAMES )
	_checkerr installing gcc
}

# -- toolchain metapackage --

do_native_toolchain_pkg() {
    if [ "x$MYARCH" = "x$DEB_HOST_ARCH" ]; then
        NTPKG_PKGNAME="${DEB_HOST_ARCH}-native-toolchain"
        NTPKG_PKGDIR=$SRC_DIR/$NTPKG_PKGNAME

        DEPENDS="gcc, cpp, g++, gcc-${GCC_VERSION}, cpp-${GCC_VERSION}, g++-${GCC_VERSION}"
        CONFLICTS="gcc-${GCC_VERSION}-${DEB_HOST_GNU_TYPE}, cpp-${GCC_VERSION}-${DEB_HOST_GNU_TYPE}, g++-${GCC_VERSION}-${DEB_HOST_GNU_TYPE}"

        NTPKG_VERSION="$TP_VERSION"

	    if [ -z "$TPKG_MAINTAINER" ]; then
		    NTPKG_MAINTAINER="Alexander Shishkin <virtuoso@slind.org>"
        else
            NTPKG_MAINTAINER="$TPKG_MAINTAINER"
        fi

        mkdir -p $NTPKG_PKGDIR/DEBIAN
        cat > $NTPKG_PKGDIR/DEBIAN/control <<EOF
Package: $NTPKG_PKGNAME
Version: $NTPKG_VERSION
Section: host-tools
Priority: optional
Architecture: $DEB_BUILD_ARCH
Depends: $DEPENDS
Conflicts: $CONFLICTS
Source: toolchain-package
Provides: build-essential-${DEB_BUILD_ARCH}
Installed-size: 0
Maintainer: $NTPKG_MAINTAINER
Description: native toolchain for $DEB_HOST_ARCH
 This is a metapackage that will get you a complete toolchain
 for native compilation into $DEB_HOST_ARCH target.
EOF

	    dpkg-deb -b $NTPKG_PKGDIR
	    dpkg-name -o $SRC_DIR/${NTPKG_PKGNAME}.deb
    fi
}

install_cross_toolchain_pkg() {
	# render package's "Depends:" header
	BINUTILS_VERSION=`_get_version "$BINUTILS_DIR"`
	BINUTILS_PKGDEP="binutils-${DEB_HOST_GNU_TYPE} (= ${BINUTILS_VERSION})"

	LKH_VERSION=`_get_version "$LKH_DIR"`
	LKH_PKGDEP="linux-kernel-headers-${DEB_HOST_ARCH}-cross (= ${LKH_VERSION})"

	GCCPKG_VERSION=`_get_version "$GCC_DIR"`
	GCC_PKGDEP="gcc-${GCC_VERSION}-${DEB_HOST_GNU_TYPE} (= ${GCCPKG_VERSION}), cpp-${GCC_VERSION}-${DEB_HOST_GNU_TYPE} (= ${GCCPKG_VERSION}), g++-${GCC_VERSION}-${DEB_HOST_GNU_TYPE} (= ${GCCPKG_VERSION}), libgcc1-${DEB_HOST_ARCH}-cross (= ${GCCPKG_VERSION}), libstdc++6-${DEB_HOST_ARCH}-cross (= ${GCCPKG_VERSION}), libstdc++6-dev-${DEB_HOST_ARCH}-cross (= ${GCCPKG_VERSION})"

    if [ "x$MYARCH" = "x$DEB_HOST_ARCH" ]; then
        CONFLICTS="cpp-${GCC_VERSION}, gcc-${GCC_VERSION}, g++-${GCC_VERSION}, libstdc++6-dev"
    else
        CONFLICTS=""
    fi

	DEPENDS="$BINUTILS_PKGDEP, $LKH_PKGDEP, $GCC_PKGDEP,"

    case "$DEB_HOST_ARCH_OS" in
        uclibc)
	        UCLIBC_VERSION=`_get_version "$UCLIBC_DIR"`
	        UCLIBC_PKGDEP="libuclibc0-${DEB_HOST_ARCH}-cross (= ${UCLIBC_VERSION}), libuclibc-dev-${DEB_HOST_ARCH}-cross (= ${UCLIBC_VERSION})"
		    DEPENDS="$DEPENDS $UCLIBC_PKGDEP";;
	    linux)
	        GLIBC_VERSION=`_get_version "$GLIBC_DIR"`
	        GLIBC_PKGDEP="libc6-${DEB_HOST_ARCH}-cross (= ${GLIBC_VERSION}), libc6-dev-${DEB_HOST_ARCH}-cross (= ${GLIBC_VERSION})"
		    DEPENDS="$DEPENDS $GLIBC_PKGDEP";;
        *)
            echo "Unknown OS"; exit 1;;
    esac

	if [ -z "$TPKG_MAINTAINER" ]; then
		TPKG_MAINTAINER="Alexander Shishkin <virtuoso@slind.org>"
	fi

	TPKG_PKGNAME="${DEB_HOST_ARCH}-cross-toolchain"
	TPKG_PKGDIR=$SRC_DIR/$TPKG_PKGNAME

	TPKG_VERSION="${TP_VERSION}+binutils${BINUTILS_VERSION}+lkh${LKH_VERSION}+gcc${GCCPKG_VERSION}"
    case "$DEB_HOST_ARCH_OS" in
        uclibc)
            TPKG_VERSION="${TPKG_VERSION}+uclibc${UCLIBC_VERSION}";;
        linux)
            TPKG_VERSION="${TPKG_VERSION}+glibc${GLIBC_VERSION}";;
        *)
            echo "Unknown OS"; exit 1;;
    esac

    TPKG_VERSION=$(echo $TPKG_VERSION | sed -e 's,-,+,g')

	mkdir -p $TPKG_PKGDIR/DEBIAN

	cat > $TPKG_PKGDIR/DEBIAN/control <<EOF
Package: $TPKG_PKGNAME
Version: $TPKG_VERSION
Section: host-tools
Priority: optional
Architecture: $DEB_BUILD_ARCH
Depends: $DEPENDS
Conflicts: $CONFLICTS
Source: toolchain-package
Provides: build-essential-${DEB_BUILD_ARCH}-cross, cross-toolchain-${DEB_HOST_ARCH}-cross, cross-toolchain-${DEB_HOST_ARCH}-dcv1
Installed-size: 0
Maintainer: $TPKG_MAINTAINER
Description: cross-compilation toolchain for $DEB_HOST_ARCH
 This is a metapackage that will get you a complete toolchain
 for cross-compilation into $DEB_HOST_ARCH target.
EOF

	dpkg-deb -b $TPKG_PKGDIR
    $INSTALL_ROOTCMD dpkg -i $SRC_DIR/${TPKG_PKGNAME}.deb
	dpkg-name -o $SRC_DIR/${TPKG_PKGNAME}.deb
}

install_virtual_toolchain() {
	TPKG_PKGNAME="${DEB_HOST_ARCH}-toolchain"
	TPKG_PKGDIR=$SRC_DIR/$TPKG_PKGNAME

	GCCPKG_VERSION=`_get_version "$GCC_DIR"`
    DEPENDS="g++-${GCC_VERSION}-${DEB_HOST_GNU_TYPE} (= ${GCCPKG_VERSION}),"

    case "$DEB_HOST_ARCH_OS" in
        uclibc)
	        UCLIBC_VERSION=`_get_version "$UCLIBC_DIR"`
            DEPENDS="${DEPENDS} libuclibc-dev-${DEB_HOST_ARCH}-cross (= ${UCLIBC_VERSION})";;
        linux)
	        GLIBC_VERSION=`_get_version "$GLIBC_DIR"`
            DEPENDS="${DEPENDS} libc6-dev-${DEB_HOST_ARCH}-cross (= ${GLIBC_VERSION})";;
        *)
            echo "Unknown OS"; exit 1;;
    esac
	
	if [ -z "$TPKG_MAINTAINER" ]; then
		TPKG_MAINTAINER="Alexander Shishkin <virtuoso@slind.org>"
	fi
	
	mkdir -p $TPKG_PKGDIR/DEBIAN

	cat > $TPKG_PKGDIR/DEBIAN/control <<EOF
Package: $TPKG_PKGNAME
Version: 0.2
Section: host-tools
Priority: optional
Architecture: all
Depends: ${DEPENDS}
Source: toolchain-package
Conflicts: gcc-${GCC_VERSION}, cpp-${GCC_VERSION}, g++-${GCC_VERSION}, gcc, cpp, g++
Provides: gcc-${GCC_VERSION}, cpp-${GCC_VERSION}, g++-${GCC_VERSION}, gcc, cpp, g++
Installed-size: 4
Maintainer: $TPKG_MAINTAINER
Description: Meta-package to remove native Debian toolchain
 WARNING! WARNING! WARNING!
 By installing this package, you confirm that you do not want to compile
 anything with native compiler anymore. You confirm that you do not care whether
 anything compiled with Slind's compiler would run on your Debian system or not.
EOF

	mkdir -p $TPKG_PKGDIR/usr/share/doc/$TPKG_PKGNAME
	cat > $TPKG_PKGDIR/usr/share/doc/$TPKG_PKGNAME/changelog <<EOF
$TPKG_PKGNAME (0.2) unstable; urgency=low

  * Initial release.

 -- $TPKG_MAINTAINER  `date --rfc-822`
EOF

	mkdir -p $TPKG_PKGDIR/usr/bin
	
	# Install symlinks.
	ln -s /usr/bin/${DEB_HOST_GNU_TYPE}-gcc-${GCC_VERSION} $TPKG_PKGDIR/usr/bin/cc
	ln -s /usr/bin/${DEB_HOST_GNU_TYPE}-gcc-${GCC_VERSION} $TPKG_PKGDIR/usr/bin/gcc
	ln -s /usr/bin/${DEB_HOST_GNU_TYPE}-cpp-${GCC_VERSION} $TPKG_PKGDIR/usr/bin/cpp
	ln -s /usr/bin/${DEB_HOST_GNU_TYPE}-g++-${GCC_VERSION} $TPKG_PKGDIR/usr/bin/g++
	ln -s /usr/bin/${DEB_HOST_GNU_TYPE}-gcc-${GCC_VERSION} $TPKG_PKGDIR/usr/bin/gcc-${GCC_VERSION} 
	ln -s /usr/bin/${DEB_HOST_GNU_TYPE}-cpp-${GCC_VERSION} $TPKG_PKGDIR/usr/bin/cpp-${GCC_VERSION} 
	ln -s /usr/bin/${DEB_HOST_GNU_TYPE}-g++-${GCC_VERSION} $TPKG_PKGDIR/usr/bin/g++-${GCC_VERSION}

	dpkg-deb -b $TPKG_PKGDIR
	$INSTALL_ROOTCMD dpkg -i $SRC_DIR/${TPKG_PKGNAME}.deb
	dpkg-name -o $SRC_DIR/${TPKG_PKGNAME}.deb
}

remove_native_toolchain() {
	if [ "x$MYARCH" = "x$DEB_HOST_ARCH" ]; then
	    $INSTALL_ROOTCMD apt-get -y --force-yes remove gcc-$GCC_VERSION cpp-$GCC_VERSION gcc cpp
	fi
}

install_native_toolchain() {
	if [ "x$MYARCH" = "x$DEB_HOST_ARCH" ]; then
	    $INSTALL_ROOTCMD env $PROXYENV apt-get -y --force-yes install gcc-$GCC_VERSION cpp-$GCC_VERSION g++-$GCC_VERSION gcc cpp g++
    fi
}

install_virtual_bs_toolchain() {
	TPKG_PKGNAME="${DEB_HOST_ARCH}-bootstrap-toolchain"
	TPKG_PKGDIR=$SRC_DIR/$TPKG_PKGNAME

	if [ -z "$TPKG_MAINTAINER" ]; then
		TPKG_MAINTAINER="Alexander Shishkin <virtuoso@slind.org>"
	fi
	
	mkdir -p $TPKG_PKGDIR/DEBIAN

	cat > $TPKG_PKGDIR/DEBIAN/control <<EOF
Package: $TPKG_PKGNAME
Version: 0.2
Section: host-tools
Priority: optional
Architecture: all
Depends: gcc-${GCC_VERSION}-${DEB_HOST_GNU_TYPE} (= ${GCCPKG_VERSION}), cpp-${GCC_VERSION}-${DEB_HOST_GNU_TYPE} (= ${GCCPKG_VERSION})
Source: toolchain-package
Conflicts: gcc-${GCC_VERSION}, cpp-${GCC_VERSION}
Provides: gcc-${GCC_VERSION}, cpp-${GCC_VERSION}, gcc, cpp
Installed-size: 4
Maintainer: $TPKG_MAINTAINER
Description: Meta-package to remove native Debian toolchain
 WARNING! WARNING! WARNING!
 By installing this package, you confirm that you do not want to compile
 anything with native compiler anymore. You confirm that you do not care whether
 anything compiled with Slind's compiler would run on your Debian system or not.
EOF

	mkdir -p $TPKG_PKGDIR/usr/share/doc/$TPKG_PKGNAME
	cat > $TPKG_PKGDIR/usr/share/doc/$TPKG_PKGNAME/changelog <<EOF
$TPKG_PKGNAME (0.2) unstable; urgency=low

  * Initial release.

 -- $TPKG_MAINTAINER  `date --rfc-822`
EOF

	mkdir -p $TPKG_PKGDIR/usr/bin
	
	# Install symlinks.
	ln -s /usr/bin/${DEB_HOST_GNU_TYPE}-gcc-${GCC_VERSION} $TPKG_PKGDIR/usr/bin/cc
	ln -s /usr/bin/${DEB_HOST_GNU_TYPE}-gcc-${GCC_VERSION} $TPKG_PKGDIR/usr/bin/gcc
	ln -s /usr/bin/${DEB_HOST_GNU_TYPE}-cpp-${GCC_VERSION} $TPKG_PKGDIR/usr/bin/cpp
	ln -s /usr/bin/${DEB_HOST_GNU_TYPE}-gcc-${GCC_VERSION} $TPKG_PKGDIR/usr/bin/gcc-${GCC_VERSION} 
	ln -s /usr/bin/${DEB_HOST_GNU_TYPE}-cpp-${GCC_VERSION} $TPKG_PKGDIR/usr/bin/cpp-${GCC_VERSION} 

	dpkg-deb -b $TPKG_PKGDIR
	$INSTALL_ROOTCMD dpkg -i $SRC_DIR/${TPKG_PKGNAME}.deb
	dpkg-name -o $SRC_DIR/${TPKG_PKGNAME}.deb
}

remove_cross_bs_toolchain() {
	GCC_PKG="gcc-${GCC_VERSION}-${DEB_HOST_GNU_TYPE} cpp-${GCC_VERSION}-${DEB_HOST_GNU_TYPE} libgcc1-${DEB_HOST_ARCH}-cross ${DEB_HOST_ARCH}-bootstrap-toolchain"

	$INSTALL_ROOTCMD apt-get -y --force-yes remove $GCC_PKG
}

do_native_toolchain_pkg

do_binutils
do_lkh
do_stage1
do_stage2
case "$DEB_HOST_ARCH_OS" in
    uclibc)
        ;;
    linux)
        build_glibc
        install_glibc;;
    *)
        echo "Unknown OS";;
esac

install_cross_toolchain_pkg
